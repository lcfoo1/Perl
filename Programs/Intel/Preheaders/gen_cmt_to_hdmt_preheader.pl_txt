#use strict;
#use warnings;

my $File = 'GEN_userFunc_tt.ph';

# Test template
my $TT = $1 if ($File =~ /(GEN_\S+).ph/ig);
open (XML, ">Mod\\$TT.xml") || die "Cant open $TT.xml : $!\n";
my $XMLHeader = '<?xml version="1.0" encoding="utf-8"?>' . "\n";
$XMLHeader .= '<TestLibraryInterfaces xmlns="http://vtsm.intel.com/2009/TestLibraryInterfaces"' . "\n";
$XMLHeader .= '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' . "\n";
$XMLHeader .= '        xsi:schemaLocation="http://vtsm.intel.com/2009/TestLibraryInterfaces TestLibraryInterfaces.xsd">' . "\n";
$XMLHeader .= "<TestLibrary name=\"" . $TT . "\">\n";
$XMLHeader .= "     <Imports>\n     </Imports>\n";
$XMLHeader .= "     <PublicBases><BaseName>TestBase</BaseName></PublicBases>\n";
$XMLHeader .= "     <Parameters>\n";
print XML $XMLHeader;

my ($FunctionName, $Cardial) = ();
open (OUT, ">Mod\\$File") || die "Cant open $File : $!\n";
open (IN, "Orig\\$File") || die "Cant open $File : $!\n";
while (<IN>)
{
	chomp;
	#TestClass = iCGENUserFuncTest;
	#TestClass = GEN_userFunc_tt;
	#next if (/Attribute\s*=\s*/ig);
	s/TestClass\s*\S+;/TestClass = $TT;/ig;
	s/Import\s*\S+.ph;/Import TestBase.ph;/ig;
	s/PublicBases\s*=\s*iCGENCore;/PublicBases = TestBase;/ig;

	if (/Description\s*=\s*\"(.*)\"/)
	{
		my $XMLBody = "";
		my $Description = $1;
		$XMLBody  = '      <Parameter  name="' . $FunctionName . '" descriptions="' . $Description . '">' . "\n";
		$XMLBody .= "        <Type>\n     	<Tester>String</Tester>\n      	<TestProgram>String</TestProgram>\n       </Type>\n";
		if ($Cardial =~ /^1$/ig)
		{
			$XMLBody .= "         <AlwaysRequired/>\n";
		}
		else
		{
			$XMLBody .= "         <Optional/>\n";
		}
		$XMLBody .= "      </Parameter>\n";
		print XML $XMLBody;
		($FunctionName, $Cardial) = ();
	}

	if (/String\s+(\S+)\s*/ig)
	{
		$FunctionName = $1;
	}	
	if (/Cardinality\s*=\s*(\S+);\s*/ig)
	{
		$Cardial = $1;
	}

#    String function_name #AVATOR FUNCTION; #CMTP FUNCTION;
#    {
#        Cardinality = 1;
#        Description = "Function name: Format for CMT: dll name!function name";
#    }
#    String function_parameter #AVATOR STRING; #CMTP STRING;
#    {
#        Cardinality = 0-1;
#        Description = "String of parameters expected by the user function";
#   }





	
	print OUT "$_\n";
}
print XML "     </Parameters>\n";
print XML "     <ExitPorts>\n";
print XML "         <!-- TBD -->\n";
print XML "     </ExitPorts>\n";
print XML "</TestLibrary>\n";
print XML "</TestLibraryInterfaces>\n";
close IN;
close OUT;
close XML;



