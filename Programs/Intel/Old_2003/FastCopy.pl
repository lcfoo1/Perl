#########################################################################################
#																						#
#								Sort/Class Data Broker									#
#																						#
#########################################################################################
#																						#
#	Foo Lye Cheung			Sort Automation												#
#	11/24/2003				Penang														#
#																						#
#	Check the wafermap files for to determine which assembly site.						#
#	It will move the wafermap files to	respective directory according to the product	#
#	and lastly send the wafermap from S03 to F18 through FastCopy software.				#
#																						#
#	NOTES																				#
#	Requires FastCopy and Perl5, and File::Copy and Net::SMTP to run.					#
#																						#
#	Send email to FastCopy Owner and IT if FastCopy server is down and					#
#	unsuccessful wafermap transfer from S03 to F18										#
#																						#
#	Modified 12/5/2003 by Lye Cheung													#
#	Make the code more flexible so that the script can send the wafermap to different	#
#	assembly site at F18.																#
#	Configure the FastCopy.pl at E:\databroker\bin\fastcopy.ini							#
#																						#
#	Modified 12/08/2003 by Lye Cheung													#
#	Make a copy of wafermap files to Planner directory as new infrastructure			#
#	have different format of pack file compared to the pack file generated by Maverick.	#
#	This is use for sending report to the Planner weekly.								#
#																						#
#	Modified 12/09/2003 by Lye Cheung													#
#	Move the wafermap folder as same folder with uploading the scribe id folder			#
#	to make the server easier to troubleshoot											#
#																						#
#########################################################################################

use Net::SMTP;
use File::Copy;

# Main code starts here
#my $WTUDir = "E:\\FTP_Home\\ftpuser\\WaferMap\\WTU\\";
my $WTUDir = "E:\\FTP_Home\\WaferMap\\WTU\\";
my $FastCopyLog = "E:\\databroker\\logs\\FastCopy\\FastCopy.log";
my $ErrorFastCopyLog = "E:\\databroker\\logs\\FastCopy\\ErrorFastCopy.log";
my $TimeNow = localtime (time);

&InitiateFastCopy();
print "FastCopy successfully completed...\n";

# Start to initialize the environment for patttern matching, product directory, FastCopy destination
sub InitiateFastCopy
{
	my $InitFastCopy = 'E:\Databroker\bin\fastcopy.ini';
	my %PatternAssembly;

	print "WaferMap Checking at SC DataBroker at PGSSODBROK01.PNG.INTEL.COM\n";

	open (CONFIG, $InitFastCopy) or die "Cannt open $InitFastCopy: $!\n";
	while (<CONFIG>) 
	{
		chomp;
		my ($Pattern, @Input_OutputDir) = split(/\s+/, $_, 5);
		push @{$PatternAssembly{$Pattern}}, @Input_OutputDir;
	}
	close CONFIG;

	foreach my $Key (keys %PatternAssembly)
	{
		my $WaferMapFlag = 0;
		my ($Pattern, $InputDir, $PlannerFlag, $PlannerDir, $Assembly) = ($Key, $PatternAssembly{$Key}[0], $PatternAssembly{$Key}[1], $PatternAssembly{$Key}[2], $PatternAssembly{$Key}[3]);
		$WaferMapFlag = &MoveToProductDir($Pattern, $InputDir, $PlannerFlag, $PlannerDir);
		&FastCopy($InputDir, $Assembly) if $WaferMapFlag;
		$WaferMapFlag = 0;
	}
	
	&FailToMoveToProdDir();

}

# Move the wafermap files to product directory
sub MoveToProductDir
{
	my ($Pattern, $InputDir, $PlannerFlag, $PlannerDir) = @_;
	my @WaferMapFile = glob("$WTUDir*");
	my $WaferMapFlag = 0;

	foreach my $File (@WaferMapFile)
	{		
		chomp $File;
		next if (-d $File);
		
		open (FILE, $File) or die "Cann't open $File: $!\n";
		while (<FILE>)
		{
			# To make more device/product name more flexible
			if((/productType/) or (/Device/))
			#if((/\s+productType\s+:\s+\"(\w+)\"/) or (/\s+Device\s+:\s+\"(\w+)\"/))
			{
				close FILE;
				if (/$Pattern/)
				{
					print "$Pattern: move $File -> $InputDir\n";
					copy ($File, $PlannerDir) if ($PlannerFlag eq "TRUE");
					move ($File, $InputDir);
					$WaferMapFlag = 1;
				}
				last;
			}
		}
	}
	return $WaferMapFlag;
}

# FastCopy application to send wafermap files to F18
sub FastCopy
{
	my ($InputDir, $Assembly) = @_;
	$InputDir .="*.* ";
	my ($ErrorFlag, $Error) = (0, "");
	my $Now = time();
	
	my $FastCopyProgramDir = "c:\\Program Files\\SoftLink\\fastcopy\\bin";
	chdir $FastCopyProgramDir or die "Cannt change directory to $FastCopyProgramDir: $!\n";

	# my $FastCopyCommand = "fcopy ".$GILADirectory."*.* \\\\f18sortmie11.lc.intel.com\\d:\\files2send\\BDE\\ASEK -user=f18_user -nopass -type=text -replace";
	my $FastCopyCommand = "fcopy ". $InputDir . $Assembly;
	my @Result =qx/$FastCopyCommand/;

	foreach my $FastCopyResult (@Result)
	{
		chomp ($FastCopyResult);
		#print "Result: $FastCopyResult\n";
		if ($FastCopyResult =~ /-E-/)
		{
			$Error .= $FastCopyResult;
			$ErrorFlag = 1;

		}
		elsif ($FastCopyResult =~ /FCOPY-S-FILE\S+\s+file\s+('(\S+)'.*)/)
		{
			my ($FastCopyFile, $SuccessfulFastCopy) = ($1, $2);
				
			open (FASTCOPYLOG, ">>$FastCopyLog") or die "Cann't open $FastCopyLog: $!\n";
			print FASTCOPYLOG "$Now $TimeNow $FastCopyFile\n";
			close FASTCOPYLOG;

			# Deletes files that have been FastCopy from S03 to F18
			unlink $SuccessfulFastCopy or die "Cannt unlink $SuccessfulFastCopy: $!\n";
			print "$TimeNow $FastCopyFile\n";
		}
	}

	if ($ErrorFlag)
	{
		#@To = ('lye.cheung.foo@intel.com', "david.ch'ng\@intel.com", 'ching.tatt.teoh@intel.com', 'seong.ngok.koo@intel.com', 'shi.ling.tan@intel.com');
		my @To = ('lye.cheung.foo@intel.com', "david.ch'ng\@intel.com", 'ching.tatt.teoh@intel.com', 'seong.ngok.koo@intel.com', 'shi.ling.tan@intel.com', 'ee.chuangx.choong@intel.com', 'kai.jiunnx.loi@intel.com');
		#@To = ('lye.cheung.foo@intel.com');#, 'yee.khoon.yeap@intel.com', 'natan.yakovian@intel.com');
		my $Subject = "Unable to send wafermap - FastCopy failed to connect from S03 to F18 at $TimeNow\n";
		my $Body = "Error from FastCopy from S03 to F18 at $TimeNow
---------------------------------------------------------------

$Error
		
			* * * Check the FastCopy connectivity, server might be down * * *

		                 * * * PLEASE DO NOT REPLY TO THIS MAIL * * *\n";

		&SendMail($Subject, $Body, @To);

		open (ERRORFASTCOPYLOG, ">>$ErrorFastCopyLog") or die "Cann't open $ErrorFastCopyLog: $!\n";
		print ERRORFASTCOPYLOG "$Now $TimeNow $Error\n";
		close ERRORFASTCOPYLOG;
		
		print "Error: $TimeNow $Error\n";
	}
}

# Wafermap file that can be identify by the script
sub FailToMoveToProdDir
{
	my @WaferMapFile = glob("$WTUDir*");
	my $FailFileFlag = 0;
	my @To = ('lye.cheung.foo@intel.com', "david.ch'ng\@intel.com", 'ching.tatt.teoh@intel.com', 'seong.ngok.koo@intel.com', 'shi.ling.tan@intel.com', 'ee.chuangx.choong@intel.com', 'kai.jiunnx.loi@intel.com');
	#my @To = ('Lye.cheung.foo@intel.com');
	my $Subject = "Wafermap - Can't identify the Product Name Pattern - $TimeNow";
	my $Body = "
$Subject
Wafermap files:
";
	foreach my $File (@WaferMapFile)
	{
		# Check wafermap file fails to move to product directory
		if ((time() - (stat($File))[9]) >= 3600) 
		{
			$Body .=$File. ", ";
			$FailFileFlag = 1;
		}
	} 

	if ($FailFileFlag)
	{
		$Body .= "

					* * * Don't reply this email * * *";
	   &SendMail($Subject, $Body, @To);
	}
}

# Send Mail to the FastCopy support and owner if the FastCopy to F18 server fails
sub SendMail 
{
	my($Subject, $Body, @To) = @_;
	my $MailHost = 'mail.intel.com';
	my $From = 'SCDataBroker@intel.com';
	my $Tos = join('; ', @To);
	my $smtp = Net::SMTP->new($MailHost);
	$smtp->mail($From);
	$smtp->to(@To);
	$smtp->data();
	$smtp->datasend("To: $Tos\n");
	$smtp->datasend("Subject: $Subject\n");
	$smtp->datasend("$Body\n");
	$smtp->dataend();
	$smtp->quit();
}