
COMPOSITE Leakage
{
	Leakage_Verify (COMPNAME = Leakage_Verify)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_Execute (COMPNAME = Leakage_Execute)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_Verify
{
	#LeakageVerify_DEBUG_OBNOXIOUS (COMPNAME = LeakageVerify_DEBUG_OBNOXIOUS)
	#0?NEXT,
	#1?NEXT,
	#2?NEXT,
	#3?NEXT;

	LeakageVerify_DEBUG_VERBOSE (COMPNAME = LeakageVerify_DEBUG_VERBOSE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;


	LeakageVerify_DEBUG_BRIEF (COMPNAME = LeakageVerify_DEBUG_BRIEF)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	LeakageVerify_DEBUG_DISABLED (COMPNAME = LeakageVerify_DEBUG_DISABLED)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;


}

COMPOSITE Leakage_Execute
{
	#LeakageExecute_DEBUG_OBNOXIOUS (COMPNAME = LeakageExecute_DEBUG_OBNOXIOUS)
	#0?NEXT,
	#1?NEXT,
	#2?NEXT,
	#3?NEXT;


	LeakageExecute_DEBUG_VERBOSE (COMPNAME = LeakageExecute_DEBUG_VERBOSE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	LeakageExecute_DEBUG_BRIEF (COMPNAME = LeakageExecute_DEBUG_BRIEF)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	LeakageExecute_DEBUG_DISABLED (COMPNAME = LeakageExecute_DEBUG_DISABLED)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	LeakageExecute_HSDM (COMPNAME = LeakageExecute_HSDM)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	### HSDs: 2942 (Leakage test does not accept LDPS pin measurement ranges) ###
	LeakageExecute_LCDPS (COMPNAME = LeakageExecute_LCDPS)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	### HSDs: 4107 (Leakage template masking pins parameter do not work) ###
	LeakageExecute_Pin_Mask (COMPNAME = LeakageExecute_Pin_Mask)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
        
        ### HSDs: 4104 (Leakage template do not allow put pin name for 65GDM modules) ###
	LeakageExecute_HS_Individual_Pin (COMPNAME = LeakageExecute_HS_Individual_Pin)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
}

COMPOSITE LeakageVerify_DEBUG_DISABLED
{
	DEF (debugMode = "DISABLED",
		preinstance = "",
		ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Invalid_Params (COMPNAME = Leakage_$debugMode_Invalid_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Required_Params (COMPNAME = Leakage_$debugMode_Required_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Manual_Range (COMPNAME = Leakage_$debugMode_Manual_Range)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE LeakageVerify_DEBUG_BRIEF
{
	DEF (debugMode = "BRIEF",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Invalid_Params (COMPNAME = Leakage_$debugMode_Invalid_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Required_Params (COMPNAME = Leakage_$debugMode_Required_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Manual_Range (COMPNAME = Leakage_$debugMode_Manual_Range)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE LeakageVerify_DEBUG_VERBOSE
{
	DEF (debugMode = "VERBOSE",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Invalid_Params (COMPNAME = Leakage_$debugMode_Invalid_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Required_Params (COMPNAME = Leakage_$debugMode_Required_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Manual_Range (COMPNAME = Leakage_$debugMode_Manual_Range)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE LeakageVerify_DEBUG_OBNOXIOUS
{
	DEF (debugMode = "OBNOXIOUS",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Invalid_Params (COMPNAME = Leakage_$debugMode_Invalid_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Required_Params (COMPNAME = Leakage_$debugMode_Required_Params)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	Leakage_$debugMode_Manual_Range (COMPNAME = Leakage_$debugMode_Manual_Range)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}


COMPOSITE Leakage_$debugMode_Invalid_Params
{
	DEF (SEGNAME = $name,
		numOfWorstCase = -1,
		leakageInputFile = "",
		datalogMode = ON,
		#debugMode = OBNOXIOUS,
		leakLowPatlist = Leak_basic_func_list,
		leakHighPatlist = Leak_basic_func_list,
		timings = iValTimings50MHz,
		level = iValLevelMin,
		pins = "all_even all_odd",
		leakTestType = VSS,
		forceValue = "0.1 0.1",
		forceLowValue = "0.1,0.1",
		lowSpec = "-0.022 -0.022", # for 800MDM chnged from 0.05
		highSpec = "0.022 0.022",  # for 800MDM chnged from 0.05
		clampHighValue = "",
		clampLowValue = "",
		deviceType = "STATIC",
		manualMeasureRange = "auto auto",
		testMethod = PARALLEL,
		overrideLeakTests = EXECUTE_ALL,
		dlogDcMinMaxRslt = MIN_MAX,
		userPause = 0.1,
		bypassGlobal = "",
		maskPins = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults");

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_$debugMode_F0,
		       leakageInputFile = "Leakage/some bad file . t x t")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_invalid_number_columns_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_invalid_number_columns_$debugMode_F0,
		       leakageInputFile = "Leakage/invalid_number_columns.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_unknown_pin_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs: 2715
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_unknown_pin_$debugMode_F0,
		       leakageInputFile = "Leakage/unknown_pin.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_invalid_pin_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:2715
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_invalid_pin_$debugMode_F0,
		       leakageInputFile = "Leakage/invalid_pin.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_pingroups_not_allowed_$debugMode_F0
	# Test Description: leakageInputFile contains a pingroup, which is not allowed in input file.
	# HSDs:2715
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_pingroups_not_allowed_$debugMode_F0,
		       leakageInputFile = "Leakage/pingroups_not_allowed.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_invalid_value_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_invalid_value_$debugMode_F0,
		       leakageInputFile = "Leakage/Input_invalid_spec.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_inputFile_spec_less_than_0_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_inputFile_spec_less_than_0_$debugMode_F0,
		       leakageInputFile = "Leakage/spec_less_than_zero.txt")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_timing_space_in_string_$debugMode_F0
	# Test Description: All required parameters valid except timing.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter timing.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_timing_space_in_string_$debugMode_F0,
		       timings = "bogus timing")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_timing_unknown_timing_$debugMode_F0
	# Test Description: All required parameters valid except timing.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter timing.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_timing_unknown_timing_$debugMode_F0,
		       timings = "bogusTiming")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_levels_space_in_string_$debugMode_F0
	# Test Description: All required parameters valid except levels.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter levels.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_levels_space_in_string_$debugMode_F0,
		       level = "bogus levels")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_levels_unknown_levels_$debugMode_F0
	# Test Description: All required parameters valid except levels.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter levels.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_levels_unknown_levels_$debugMode_F0,
		       level = "bogusLevels")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_pin_space_in_string_$debugMode_F0
	# Test Description: All required parameters valid except pin.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter pin.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_pin_space_in_string_$debugMode_F0,
		       pins = "bogus pin")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_pin_unknown_pin_$debugMode_F0
	# Test Description: All required parameters valid except pin.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter pin.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_pin_unknown_pin_$debugMode_F0,
		       pins = "bogusPin")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_pin_invalid_pin_type_$debugMode_F0
	# Test Description: All required parameters valid except pin.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter pin.
	#################################################################################################

	tt_leakage(name = LeakageVerify_Invalid_pin_invalid_pin_type_$debugMode_F0,
		       pins = "HDPS")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_spec_invalid_number_$debugMode_F0
	# Test Description: All required parameters valid except low_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_spec_invalid_number_$debugMode_F0,
		       lowSpec = "ff,aa")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_spec_negative_number_$debugMode_F0
	# Test Description: All required parameters valid except low_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_spec_negative_number_$debugMode_F0,
		       lowSpec = "-0.100,-0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_spec_number_of_values_less_$debugMode_F0
	# Test Description: All required parameters valid except low_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_spec_number_of_values_less_$debugMode_F0,
		       lowSpec = "0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_spec_number_of_values_more_$debugMode_F0
	# Test Description: All required parameters valid except low_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_spec_number_of_values_more_$debugMode_F0,
		       lowSpec = "0.100,0.100,0.100,0.100,0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_spec_value_too_large_$debugMode_F0
	# Test Description: All required parameters valid except low_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_spec_value_too_large_$debugMode_F0,
		       lowSpec = "100000.0,100000.0")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_spec_invalid_number_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_spec_invalid_number_$debugMode_F0,
		       highSpec = "ff,aa")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_spec_negative_number_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_spec_negative_number_$debugMode_F0,
		       highSpec = "-0.100,-0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_spec_number_of_values_less_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_spec_number_of_values_less_$debugMode_F0,
		       highSpec = "0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_spec_number_of_values_more_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_spec_number_of_values_more_$debugMode_F0,
		       highSpec = "0.100,0.100,0.100,0.100,0.100")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_spec_value_too_large_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_spec.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_spec_value_too_large_$debugMode_F0,
		       highSpec = "100000.0,100000.0")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_force_low_empty_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter forceLowValue.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_force_low_empty_BOTH_$debugMode_F0,
		       leakTestType = "BOTH",
		       forceValue = "",
		       forceLowValue = "")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_force_low_empty_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter forceLowValue.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_force_empty_BOTH_$debugMode_F0,
		       leakTestType = "BOTH",
		       forceValue = "",
		       forceLowValue = "")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_force_low_empty_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter forceLowValue.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_number_force_less_than_pin_BOTH_$debugMode_F0,
		       leakTestType = "BOTH",
		       forceValue = "0.1",
		       forceLowValue = "0.1")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_low_patlist_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter low_patlist
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_low_patlist_$debugMode_F0,
		       leakLowPatlist = "someTypeOfInvalidPatlist")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_high_patlist_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter high_patlist.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_high_patlist_$debugMode_F0,
		       leakHighPatlist = "someTypeOfInvalidPatlist")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_clamp_low_value_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter clamp_low_spec.
	#################################################################################################
	#tt_leakage(name = LeakageVerify_Invalid_clamp_low_value_$debugMode_F0,
	#	       clampLowValue = "FF")

	#0?NEXT,
	#1?NEXT,
	#2?NEXT,
	#3?NEXT;
	
	##Invalid Clamp values
	
        #################################################################################################
	# Test Name: LeakageVerify_Invalid_Number_of_clamp_low_value_$debugMode_F0
	# Test Description: All required parameters valid except number of Low clamp (1) value specified 
	# does not match the Number_of pins(2)
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Number_of_clamp_low_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampHighValue = "0.025 0.025",
		       clampLowValue = "-0.025")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        #################################################################################################
	# Test Name: LeakageVerify_Invalid_Number_and_bad_Value_of_clamp_low_value_$debugMode_F0
	# Test Description: All required parameters valid except Low clamp value specified is bogus and also 
	# does not match the Number_of pins
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Number_and_bad_Value_of_clamp_low_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampHighValue = "0.025 0.025",
		       clampLowValue = "BOGUS")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        #################################################################################################
	# Test Name: LeakageVerify_bad_Value_of_clamp_low_value_$debugMode_F0
	# Test Description: All required parameters valid except one Low clamp value specified is bogus 
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_bad_Value_of_clamp_low_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampHighValue = "0.025 0.025",
		       clampLowValue = "-0.025 BOGUS")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;	
	

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_clamp_high_value_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter clamp_low_spec.
	#################################################################################################
	#tt_leakage(name = LeakageVerify_Invalid_clamp_high_value_$debugMode_F0,
	#	       clampHighValue = "FF")

	#0?NEXT,
	#1?NEXT,
	#2?NEXT,
	#3?NEXT;
	
        
        
        #################################################################################################
	# Test Name: LeakageVerify_Invalid_Number_of_clamp_High_value_$debugMode_F0
	# Test Description: All required parameters valid except number of High clamp (1) value specified 
	# does not match the Number_of pins(2)
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Number_of_clamp_high_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampHighValue = "0.025",
		       clampLowValue = "-0.025 -0.025")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        #################################################################################################
	# Test Name: LeakageVerify_Invalid_Number_and_bad_Value_of_clamp_high_value_$debugMode_F0
	# Test Description: All required parameters valid except High clamp value specified is bogus and also 
	# does not match the Number_of pins
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Number_and_bad_Value_of_clamp_high_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampLowValue = "-0.025 -0.025",
		       clampHighValue = "BOGUS")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        #################################################################################################
	# Test Name: LeakageVerify_bad_Value_of_clamp_high_value_$debugMode_F0
	# Test Description: All required parameters valid except one high clamp value specified is bogus 
	# HSDs:4597
	# Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
	#################################################################################################
	tt_leakage(name = LeakageVerify_bad_Value_of_clamp_high_value_$debugMode_F0,
		       pins = "all_even all_odd",
		       clampLowValue = "-0.025 -0.025",
		       clampHighValue = "0.025 BOGUS")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;		
	
	
	       

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_Bypass_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid bypass
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Bypass_$debugMode_F0,
		       bypassGlobal = "GL_BypassGlobal")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_clamp_high_value_$debugMode_F0
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid bypass
    # Note: The variable $bypass0 is set to 0 in usrv. So, it will exit on port '0'. So the expected
    #       result it set to F0. 
	#################################################################################################
	tt_leakage(name = LeakageVerify_Bypass_$debugMode_FNOTEXECUTED_F0,
		       bypassGlobal = $bypass0)

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Bypassq_$debugMode_P0,
	# Test Description: All required parameters valid except high_spec.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid bypass
    # Note: The variable $bypass1 is set to 1 in usrv. So, it will exit on port '1'. So the expected
    #       result it set to F1. 
	#################################################################################################
	tt_leakage(name = LeakageVerify_Bypassq_$debugMode_FNOTEXECUTED_F1,
		       bypassGlobal = $bypass1)

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_UserPauseLow_$debugMode_F0,
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_UserPauseLow_$debugMode_F0,
		       userPause = -0.1)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_UserPauseHigh_$debugMode_F0,
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_UserPauseHigh_$debugMode_F0,
		       userPause = 100.0)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_manual_measure_range_not_coorect_$debugMode_F0,
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_manual_measure_range_not_coorect_$debugMode_F0,
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "0.05 0.05",
		       highSpec = "-0.05 -0.05",
		       clampLowValue = "0.10 0.10",
		       clampHighValue = "-0.10 -0.10",
		       manualMeasureRange = "100A 100A")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_HigLimitLowerThanLowLimit_$debugMode_F0,
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	# Needed change for 800MDM for clamp values
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_HigLimitLowerThanLowLimit_$debugMode_F0,
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "0.022 0.022",
		       highSpec = "-0.022 -0.22",
		       clampLowValue = "0.025 0.025",
		       clampHighValue = "-0.025 -0.025",
		       manualMeasureRange = "auto auto")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        #################################################################################################
	# Test Name: LeakageVerify_Invalid_ClampValues_$debugMode_F0,
	# Test Description: All required parameters valid except clamp settings.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	# Needed change for 800MDM for clamp values
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_ClampValues_$debugMode_F0,
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "0.022 0.022",
		       highSpec = "-0.052 -0.22",
		       clampLowValue = "-0.025 -0.025",
		       clampHighValue = "0.055 0.055",
		       manualMeasureRange = "auto auto")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;	

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_Spec_and_clamp_higher_than_range_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	# Needed separate test case for 800MDM for manualmeasureRange
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Spec_and_clamp_higher_than_range_$debugMode_F0,
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.022 -0.022",
		       highSpec = "0.022 0.022",
		       clampLowValue = "0.025 0.025",
		       clampHighValue = "-0.025 -0.025",
		       manualMeasureRange = "2uA 2uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_Spec_higher_than_clamp_$debugMode_F0
	# Test Description: All required parameters valid except leakageInputFile.
	# HSDs:
	# Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
	# Needed separate test case for 800MDM for manualmeasureRange
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_Spec_higher_than_clamp_$debugMode_F0,
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.022 -0.022",
		       highSpec = "0.022 0.022",
		       clampLowValue = "0.020 0.020",
		       clampHighValue = "-0.020 -0.020",
		       manualMeasureRange = "25mA 25mA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_250DM_measurerange_$debugMode_F0
	# Test Description: Invalid measure range specified for a 250 DM pin group.
	# HSDs:3273
	# Expected Behavior: Fail.
	# Needed separate test case for 800MDM for manualmeasureRange
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_250DM_measurerange_$debugMode_F0,
		manualMeasureRange = "8uA 95mA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	#################################################################################################
	# Test Name: LeakageVerify_Invalid_65GDM_measurerange_$debugMode_F0
	# Test Description: Invalid measure range specified for a 65G DM pin group.
	# HSDs:3273
	# Expected Behavior: Fail.
	#################################################################################################
	tt_leakage(name = LeakageVerify_Invalid_65GDM_measurerange_$debugMode_F0,
	        pins = "all_even hsdm_all_ppmu_pins",
		manualMeasureRange = "6uA 128mA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

}

COMPOSITE Leakage_$debugMode_Required_Params
{
	DEF (SEGNAME = $name,
		numOfWorstCase = -1,
		leakageInputFile = "",
		datalogMode = ON,
		#debugMode = OBNOXIOUS,
		leakLowPatlist = "",
		leakHighPatlist = ""
		timings = iValTimings50MHz,
		level = iValLevelMin,
		pins = "all_even all_odd",
		leakTestType = VSS,
		forceValue = "0.1 0.1",
		forceLowValue = "0.1,0.1",
		lowSpec	= "-0.022 -0.022",  # for 800MDM chnged from 0.05
		highSpec = "0.022 0.022",  # for 800MDM changed from 0.05	
		clampHighValue = "",
		clampLowValue = "",
		deviceType = "STATIC",
		manualMeasureRange = "auto auto",
		testMethod = PARALLEL,
		overrideLeakTests = EXECUTE_ALL,
		dlogDcMinMaxRslt = MIN_MAX,
		userPause = 0.1,
		bypassGlobal = "",
		maskPins = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults");

	tt_leakage(name = LeakageVerify_No_Level_$debugMode_F0,
		       level = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	tt_leakage(name = LeakageVerify_No_Pins_$debugMode_F0,
		       pins = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_No_LowSpec_$debugMode_F0,
		       lowSpec = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_No_HighSpec_$debugMode_F0,
		       highSpec = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_No_timing_with_low_patlist_$debugMode_F0,
		       leakLowPatlist = "Leak_basic_func_list",
		       timings = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_No_timing_with_high_patlist_$debugMode_F0,
		       leakHighPatlist = "Leak_basic_func_list",
		       timings = "")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_No_force_$debugMode_F0,
		       leakTestType = "VSS",
		       forceValue = "")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_no_force_low_$debugMode_F0,
		       leakTestType = "VCC",
		       forceLowValue = "")

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_$debugMode_Manual_Range
{
	DEF (SEGNAME = $name,
		numOfWorstCase = -1,
		leakageInputFile = "",
		datalogMode = ON,
		#debugMode = OBNOXIOUS,
		leakLowPatlist = "",
		leakHighPatlist = ""
		timings = iValTimings50MHz,
		level = iValLevelMin,
		pins = "all_even all_odd",
		leakTestType = VSS,
		forceValue = "0.1 0.1",
		forceLowValue = "0.1 0.1",
	    lowSpec	= "-0.022", # for 800MDM chnged from 0.05
		highSpec = "0.022",  # for 800MDM changed from 0.05	
		clampLowValue = "-0.06 -0.06", #changed from DM250 value 0.1
		clampHighValue = "0.06 0.06", #changed from DM250 value 0.1
		deviceType = "STATIC",
		manualMeasureRange = "auto auto",
		testMethod = PARALLEL,
		overrideLeakTests = EXECUTE_ALL,
		dlogDcMinMaxRslt = MIN_MAX,
		userPause = 0.1,
		bypassGlobal = "",
		maskPins = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults");

	tt_leakage(name = LeakageVerify_ManRange_Not_Equal_To_Force_auto_$debugMode_F0,
		       pins = "all_even all_odd Yadds scan_ins",
		       forceValue = "0.1 0.1 0.1",
		       forceLowValue = "0.1 0.1 0.1 0.1",
		       lowSpec = "-0.022 -0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022 0.022",
		       clampHighValue = "0.025 0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025 -0.025",
		       manualMeasureRange= "auto")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_ManRange_Not_Equal_To_Force_$debugMode_F0,
		       pins = "all_even all_odd Yadds scan_ins",
                       forceValue = "0.1 0.1 0.1 0.1",
		       forceLowValue = "0.1 0.1 0.1 0.1",
		       lowSpec = "-0.022 -0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022 0.022",
		       clampHighValue = "0.025 0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025 -0.025",
		       manualMeasureRange= "6uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_Force_Not_Equal_To_Pin_$debugMode_F0,
		       pins = "all_even all_odd Yadds scan_ins",
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
                       lowSpec = "-0.022 -0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022 0.022",
		       clampHighValue = "0.025 0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025 -0.025",		       
		       manualMeasureRange= "6uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_Range_check_Invalid_range_values_$debugMode_F0,
		       pins = "all_even all_odd Yadds scan_ins",
		       forceValue = "0.1 0.1 0.1 0.1",
		       forceLowValue = "0.1 0.1 0.1 0.1",
		       lowSpec = "-0.022 -0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022 0.022",
                       clampHighValue = "0.025 0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025 -0.025",	
		       manualMeasureRange= "4uA 40uA 400uA 4000uA ")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_Range_check_2ua_20ua_200ua_$debugMode_F0,
		       pins = "all_even all_odd Yadds scan_ins",
                       forceValue = "0.1 0.1 0.1 0.1",
		       forceLowValue = "0.1 0.1 0.1 0.1",
		       lowSpec = "-0.022 -0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022 0.022",
                       clampHighValue = "0.025 0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025 -0.025",
		       manualMeasureRange= "2uA 20uA 200uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageVerify_Range_check_2ma_25ma_$debugMode_F0,
		       pins = "all_even all_odd,Yadds",
		       forceValue = "0.1 0.1 0.1",
		       forceLowValue = "0.1 0.1 0.1",
		       lowSpec = "-0.022 -0.022 -0.022",
		       highSpec = "0.022 0.022 0.022" ,
		       clampHighValue = "0.025 0.025 0.025",
		       clampLowValue = "-0.025 -0.025 -0.025",
		       manualMeasureRange= "2mA 25mA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
      # HSD 4105
      tt_leakage(name = LeakageVerify_manual_measure_range_lower_than_hi_spec_$debugMode_F0,
		       pins = "all_even all_odd",
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.0000019 -0.000019",
		       highSpec = "0.000019 0.00019",
		       manualMeasureRange= "2uA 20uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
    
     # HSD 4105
    tt_leakage(name = LeakageVerify_manual_measure_range_higher_than_lo_spec_$debugMode_F0,
		       pins = "all_even all_odd",
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.000019 -0.00019",
		       highSpec = "0.0000019 0.000019",
		       manualMeasureRange= "2uA 20uA")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	
}


COMPOSITE LeakageExecute_DEBUG_DISABLED
{

	DEF (debugMode = "DISABLED",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Manual_Range_AUTO (COMPNAME = Leakage_$debugMode_Manual_Range_AUTO)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2UA (COMPNAME = Leakage_$debugMode_Manual_Range_2UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_20UA (COMPNAME = Leakage_$debugMode_Manual_Range_20UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_200UA (COMPNAME = Leakage_$debugMode_Manual_Range_200UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2MA (COMPNAME = Leakage_$debugMode_Manual_Range_2MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	Leakage_$debugMode_Manual_Range_25MA (COMPNAME = Leakage_$debugMode_Manual_Range_25MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	
	Leakage_multiPin_$debugMode_dlog_NONE (COMPNAME = Leakage_multiPin_$debugMode_dlog_NONE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_ALL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = Leakage_multiPin_$debugMode_dlog_MIN_MAX)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

}

COMPOSITE LeakageExecute_DEBUG_BRIEF
{
	DEF (debugMode = "BRIEF",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Manual_Range_AUTO (COMPNAME = Leakage_$debugMode_Manual_Range_AUTO)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2UA (COMPNAME = Leakage_$debugMode_Manual_Range_2UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_20UA (COMPNAME = Leakage_$debugMode_Manual_Range_20UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_200UA (COMPNAME = Leakage_$debugMode_Manual_Range_200UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2MA (COMPNAME = Leakage_$debugMode_Manual_Range_2MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_25MA (COMPNAME = Leakage_$debugMode_Manual_Range_25MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

		
	Leakage_multiPin_$debugMode_dlog_NONE (COMPNAME = Leakage_multiPin_$debugMode_dlog_NONE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_ALL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = Leakage_multiPin_$debugMode_dlog_MIN_MAX)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

}

COMPOSITE LeakageExecute_DEBUG_VERBOSE
{
	DEF (debugMode = "VERBOSE",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Manual_Range_AUTO (COMPNAME = Leakage_$debugMode_Manual_Range_AUTO)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2UA (COMPNAME = Leakage_$debugMode_Manual_Range_2UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_20UA (COMPNAME = Leakage_$debugMode_Manual_Range_20UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_200UA (COMPNAME = Leakage_$debugMode_Manual_Range_200UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2MA (COMPNAME = Leakage_$debugMode_Manual_Range_2MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_25MA (COMPNAME = Leakage_$debugMode_Manual_Range_25MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_NONE (COMPNAME = Leakage_multiPin_$debugMode_dlog_NONE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_ALL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = Leakage_multiPin_$debugMode_dlog_MIN_MAX)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE LeakageExecute_DEBUG_OBNOXIOUS
{
	DEF (debugMode = "OBNOXIOUS",
	  preinstance = "",
	  ignoreAlarm = "ALL_THREE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_$debugMode_Manual_Range_AUTO (COMPNAME = Leakage_$debugMode_Manual_Range_AUTO)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2UA (COMPNAME = Leakage_$debugMode_Manual_Range_2UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_20UA (COMPNAME = Leakage_$debugMode_Manual_Range_20UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_200UA (COMPNAME = Leakage_$debugMode_Manual_Range_200UA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_2MA (COMPNAME = Leakage_$debugMode_Manual_Range_2MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_Manual_Range_25MA (COMPNAME = Leakage_$debugMode_Manual_Range_25MA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	
	Leakage_multiPin_$debugMode_dlog_NONE (COMPNAME = Leakage_multiPin_$debugMode_dlog_NONE)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_FAIL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = Leakage_multiPin_$debugMode_dlog_ALL_DATA)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = Leakage_multiPin_$debugMode_dlog_MIN_MAX)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

}

COMPOSITE Leakage_multiPin_$debugMode_dlog_NONE
{
	DEF (dlogDcMinMaxRslt = "NONE",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_multiPin_$debugMode_dlog_FAIL_CHANNEL
{
	DEF (dlogDcMinMaxRslt = "FAIL_CHANNEL",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_multiPin_$debugMode_dlog_FAIL_DATA
{
	DEF (dlogDcMinMaxRslt = "FAIL_DATA",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_multiPin_$debugMode_dlog_ALL_DATA
{
	DEF (dlogDcMinMaxRslt = "ALL_DATA",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_multiPin_$debugMode_dlog_MIN_MAX
{
	DEF (dlogDcMinMaxRslt = "MIN_MAX",
		bypass0 = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass1 = "GL_Bypass_Leakage_1");

	Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_$debugMode_Manual_Range_AUTO
{
	DEF (manualMeasureRange = "AUTO",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	#If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
		bypass2 = "GL_Bypass_Leakage_1",
        	bypassAlaram = "",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "P1",
		lcdpsHighExpectPort = "P1",
		inputfileLcdpsExpectPort = "F0",
        	inputfileBadLimitsExpectPort = "F3",
		localForce = "0.1",	    
		localForceLow = "0.1",
		localForceFail = "0.05",
		localForceOverFlow = "0.2",
		localLowSpec = "0.018",    
		localHighSpec = "0.022",    
		#localClampLow = "-0.06",   
		#localClampHigh = "0.06",   
		localClampLow = "-0.025",
        localClampHigh = "0.025",
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");

	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME =Leakage_$debugMode_$manualMeasureRange_InputFile)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

}
COMPOSITE Leakage_$debugMode_Manual_Range_2UA
{
	DEF (manualMeasureRange = "2uA",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "F0",
		lcdpsHighExpectPort = "FNOTEXECUTED",
		inputfileLcdpsExpectPort = "P1",
        	inputfileBadLimitsExpectPort = "F3",
		localForce = "0.00000875",	#should result in  +1.75uA but using p-dut model
		localForceLow = "0.00000875", 
		localForceFail = "0.000007",    #should result in  +1.4uA but using p-dut model
		localForceOverFlow = "0.2",
		localLowSpec = "1.5uA",  
		localHighSpec = "1.9uA",
		localClampLow = "-4uA",
		localClampHigh = "4uA",
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");


	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME = Leakage_$debugMode_$manualMeasureRange_InputFile)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}
COMPOSITE Leakage_$debugMode_Manual_Range_20UA
{
	DEF (manualMeasureRange = "20uA",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "F0",
		lcdpsHighExpectPort = "FNOTEXECUTED",
		inputfileLcdpsExpectPort = "F3",
                inputfileBadLimitsExpectPort = "F3",
		localForce = "0.0000875",	#should result in  +17.5uA but using p-dut model
		localForceLow = "0.0000875",
		localForceFail = "0.00007",	#should result in  +14.0uA but using p-dut model
		localForceOverFlow = "0.2",
		localLowSpec = "15uA",
		localHighSpec = "19uA",
		localClampLow = "-40uA",
		localClampHigh = "40uA",
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");

	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME = Leakage_$debugMode_$manualMeasureRange_InputFile)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_$debugMode_Manual_Range_200UA {
	DEF (manualMeasureRange = "200uA",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "F0",
		lcdpsHighExpectPort = "FNOTEXECUTED",
		inputfileLcdpsExpectPort = "F3",
        	inputfileBadLimitsExpectPort = "F3",
		localForce = "0.000875",	#should result in  +175uA but using p-dut model
		localForceLow = "0.000875",
		localForceOverFlow = "0.2",
		localForceFail = "0.0007",
		localLowSpec = "150uA",
		localHighSpec = "190uA",
		localClampLow = "-400uA",
		localClampHigh = "400uA",
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");

	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME = Leakage_$debugMode_$manualMeasureRange_InputFile)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_$debugMode_Manual_Range_2MA {
	DEF (manualMeasureRange = "2mA",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "F0",
		lcdpsHighExpectPort = "FNOTEXECUTED",
		inputfileLcdpsExpectPort = "F3",
       		inputfileBadLimitsExpectPort = "F3",
		localForce = "0.00875",	#should result in  +1.75mA but using p-dut model
		localForceLow = "0.00875",
		localForceOverFlow = "0.2",
		localForceFail = "0.007",
		localLowSpec = "1.5mA",
		localHighSpec = "1.9mA",
		localClampLow = "-4mA",
		localClampHigh = "4mA",
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");

	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME = Leakage_$debugMode_$manualMeasureRange_InputFile)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_$debugMode_Manual_Range_25MA {
	DEF (manualMeasureRange = "25mA",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
        	bypassAlaram = "",
		modifiedExpectPort = "F3",
		lcdpsLowExpectPort = "P1",
		lcdpsHighExpectPort = "P1",
		inputfileLcdpsExpectPort = "F0",
        	inputfileBadLimitsExpectPort = "F3",
		localForce = "0.1",	    
		localForceLow = "0.1",
		localForceFail = "0.05",
		localForceOverFlow = "0.2",
		localLowSpec = "0.018",    
		localHighSpec = "0.022",    
		localClampLow = "-0.05",   
		localClampHigh = "0.05",   
		pins = "all_pins",
		domain="",
		PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
		FailPreInstancePostfix = "_Fail.txt",
		PassPreInstancePostfix = "_Pass.txt",
		preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
		bypassHSDM = "");

	Leakage_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = Leakage_$debugMode_$manualMeasureRange_Pattern_Exec)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	Leakage_$debugMode_$manualMeasureRange_InputFile (COMPNAME =Leakage_$debugMode_$manualMeasureRange_InputFile,
		$ExpectPort = "F3")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}



COMPOSITE Leakage_$debugMode_$manualMeasureRange_Pattern_Exec 
{
	DEF(SEGNAME			=			$name,
		numOfWorstCase		=			-1,
		leakageInputFile	=			"",
		datalogMode		=			ON,
		#debugMode		=			OBNOXIOUS,
		leakLowPatlist		=			"Leak_basic_func_list",
		leakHighPatlist		=			"Leak_basic_func_list"
		timings			=			iValTimings50MHz,
		level			=			iValLevelMin,
		leakTestType		=			BOTH,
		forceValue		=			$localForce,
		forceLowValue		=			$localForceLow,
		lowSpec			=			$localLowSpec, 
		highSpec		=			$localHighSpec,  
		clampLowValue		=			$localClampLow,
		clampHighValue		=			$localClampHigh,
		deviceType		=			"STATIC",
		testMethod		=			PARALLEL,
		overrideLeakTests	=			EXECUTE_ALL,
		dlogDcMinMaxRslt	=			MIN_MAX,
		userPause		=			0.1,
		bypassGlobal		=			"",
		maskPins 		= 			"",
		postinstance		=			"iVal_utilityfunc!GenerateInstanceResults");

    # Note: The variable $bypass1 is set to 0 in usrv. So, it will exit on port '0'. So the expected
    #       result it set to F0. 
	tt_leakage(name = LeakageExecute_CheckForBypassFlag0_$debugMode_$manualMeasureRange_FNOTEXECUTED_F0,
		       bypassGlobal = $bypass0)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

    # Note: The variable $bypass1 is set to 1 in usrv. So, it will exit on port '1'. So the expected
    #       result it set to F1. 
	tt_leakage(name = LeakageExecute_CheckForBypassFlag1_$debugMode_$manualMeasureRange_FNOTEXECUTED_F1,
		       bypassGlobal = $bypass1)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

        #HSD 4597 test cases added for Empty clamp values at different manual measure mode. Clamp mode should default to autoclamp mode and execute
        
        tt_leakage(name = LeakageExecute_with_all_even_all_odd_as_pin_Both_Clamps_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
        	clampLowValue	="",
		clampHighValue	="",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
        tt_leakage(name = LeakageExecute_with_all_even_all_odd_as_pin_Low_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
        	clampLowValue	="")
		
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	tt_leakage(name = LeakageExecute_with_all_even_all_odd_as_pin_High_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
        	clampHighValue	="")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	
	tt_leakage(name = LeakageExecute_with_all_even_all_odd_as_pin_$debugMode_$manualMeasureRange_$ExpectPort)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_NumWorstCase_zero_$debugMode_$manualMeasureRange_$ExpectPort,
		       numOfWorstCase = 0)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_NumWorstCase_low_$debugMode_$manualMeasureRange_$ExpectPort,
		       numOfWorstCase = -10)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

 	#tt_leakage(name = LeakageExecute_with_lcdps_as_pin_low_force_$debugMode_$manualMeasureRange_$lcdpsLowExpectPort,
	#	       pins = "LDPS"
	#	       bypassGlobal = $bypassHSDM)
	#0?NEXT,
	#1?NEXT,
	#2?NEXT,
	#3?NEXT;

    #################################################################################################
    # Test Name: FixTBD_LeakageExecute_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort
    # Test Description: invalid test cases as the force value, clamp setting is not correct. Did not meet the minimum 
    # tester hardware resolution spec. That why getting zero and causing alarm. Due to test case design and time constraint 
    # these test cases has been FixTDB. 
    # HSDs: 2623
    # Expected Behavior: F3
    # Collaterals Req: 
    #################################################################################################

 	tt_leakage(name = FixTBD_LeakageExecute_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort,
		       bypassGlobal = "GL_FixTBDBypassGlobal",
		       forceValue = $localForce,
		       forceLowValue = $localForceLow,
		       lowSpec = $localLowSpec,
		       highSpec = $localHighSpec,
		       clampLowValue = $localClampLow,
		       clampHighValue = $localClampHigh,
		       pins = "LDPS")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_VSS_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
		       leakTestType = VSS)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_VCC_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
		       leakTestType = VCC)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_modified_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
		       
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	tt_leakage(name = LeakageExecute_VSS_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       leakTestType = VSS,
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       forceValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_VCC_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       leakTestType = VCC,
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
		       testMethod = SERIAL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_modified_serial_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       testMethod = SERIAL,
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
		       deviceType = "DYNAMIC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_modified_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       deviceType = "DYNAMIC",
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
		       deviceType = "DYNAMIC",
		       testMethod = SERIAL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_modified_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_$manualMeasureRange_Fail.txt"
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       deviceType = "DYNAMIC",
		       testMethod = SERIAL,
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
		       overrideLeakTests = "EXIT_ON_FAIL")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_modified_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_$manualMeasureRange_Fail.txt"
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       testMethod = SERIAL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_modified_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_$manualMeasureRange_Fail.txt"
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       testMethod = SERIAL,
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       deviceType = "DYNAMIC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_modified_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_$manualMeasureRange_Fail.txt"
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       deviceType = "DYNAMIC",
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       deviceType = "DYNAMIC",
		       testMethod = SERIAL)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_modified_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
		       #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_$manualMeasureRange_Fail.txt"
		       preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
		       overrideLeakTests = "EXIT_ON_FAIL",
		       deviceType = "DYNAMIC",
		       testMethod = SERIAL,
		       forceValue = $localForceFail,
		       forceLowValue = $localForceFail)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
        
        # new Overflow Test case
	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
			       preinstance = "",
			       forceValue = $localForceOverFlow,
			       forceLowValue = $localForceOverFlow)
			       
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
			       preinstance = "",
			       testMethod = SERIAL,
			       forceValue = $localForceOverFlow,
			       forceLowValue = $localForceOverFlow)
				       
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	tt_leakage(name = LeakageExecute_BOTH_exec_test_parallel_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
			       preinstance = "",
			       deviceType = "DYNAMIC",
			       forceValue = $localForceOverFlow,
			       forceLowValue = $localForceOverFlow)
				       
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_BOTH_exec_test_serial_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
			       preinstance = "",
			       testMethod = SERIAL,
			       deviceType = "DYNAMIC",
			       forceValue = $localForceOverFlow,
			       forceLowValue = $localForceOverFlow)

	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	

}


COMPOSITE Leakage_$debugMode_$manualMeasureRange_InputFile {
	DEF(SEGNAME			=			$name,
		numOfWorstCase		=			-1,
		leakageInputFile	=			"",
		datalogMode		=			ON,
		#debugMode		=			OBNOXIOUS,
		leakLowPatlist		=			"Leak_basic_func_list",
		leakHighPatlist		=			"Leak_basic_func_list"
		timings			=			iValTimings50MHz,
		level			=			iValLevelMin,
		#pins			=			"all_pins",
		leakTestType		=			BOTH,
		forceValue		=			$localForce,
		forceLowValue		=			$localForceLow,
		lowSpec			=			$localLowSpec, 
		highSpec		=			$localHighSpec, 
		clampLowValue 		= 			$localClampLow,
		clampHighValue 		= 			$localClampHigh,
		deviceType		=			"STATIC",
		#manualMeasureRange	=			"auto auto",
		testMethod		=			PARALLEL,
		overrideLeakTests	=			EXECUTE_ALL,
		dlogDcMinMaxRslt	=			MIN_MAX,
		userPause		=			0.1,
		bypassGlobal		=			"",
		maskPins 		=			"",
		postinstance		=			"iVal_utilityfunc!GenerateInstanceResults",
		fileprefix = "Leakage/Input",
		filepostfix1 = "_low_limit.txt",
		filepostfix2 = ".txt");

	tt_leakage(name = LeakageExecute_input_file_with_bad_limits_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
		       leakageInputFile = $fileprefix$domain$filepostfix1)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
	tt_leakage(name = LeakageExecute_input_file_dlog_none_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
			   dlogDcMinMaxRslt = "NONE",
		           leakageInputFile = $fileprefix$domain$filepostfix2)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_input_file_dlog_fail_channel_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
			   dlogDcMinMaxRslt = "FAIL_CHANNEL",
		           leakageInputFile = $fileprefix$domain$filepostfix2)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_input_file_dlog_fail_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
			   dlogDcMinMaxRslt = "FAIL_DATA",
		          leakageInputFile = $fileprefix$domain$filepostfix2)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_input_file_dlog_all_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
			   dlogDcMinMaxRslt = "ALL_DATA",
		           leakageInputFile = $fileprefix$domain$filepostfix2)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_input_file_dlog_min_max_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
			   dlogDcMinMaxRslt = "MIN_MAX",
		           leakageInputFile = $fileprefix$domain$filepostfix2)
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
}

COMPOSITE Leakage_multiPin_$debugMode_$dlogDcMinMaxRslt {
	DEF(SEGNAME			=			$name,
		numOfWorstCase		=			-1,
		leakageInputFile	=			"",
		datalogMode		=			ON,
		#debugMode		=			OBNOXIOUS,
		leakLowPatlist		=			"Leak_basic_func_list",
		leakHighPatlist		=			"Leak_basic_func_list"
		timings			=			iValTimings50MHz,
		level			=			iValLevelMin,
		pins			=			"LDPS all_even all_odd",
		leakTestType		=			BOTH,
		forceValue		=			"",
		forceLowValue		=			"",
		lowSpec			=			"",
		highSpec		=			"",
		clampHighValue		=			"",
		clampLowValue		=			"",
		deviceType		=			"STATIC",
		manualMeasureRange	=			"",
		testMethod		=			PARALLEL,
		overrideLeakTests	=			EXECUTE_ALL,
		#dlogDcMinMaxRslt	=			MIN_MAX,
		userPause		=			0.1,
		bypassGlobal		=			"",
		maskPins		=			"",
		postinstance		=			"iVal_utilityfunc!GenerateInstanceResults");

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_static_execute_all_auto_range_P1,
               bypassGlobal = "",
		       forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_P1,
               bypassGlobal = "",
		       deviceType = "DYNAMIC",
			forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_P1,
           bypassGlobal = "",
		       testMethod = "SERIAL",
		       deviceType = "STATIC",
           forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_dynamic_execute_all_auto_range_P1,
           bypassGlobal = "",
		       testMethod = "SERIAL",
		       deviceType = "DYNAMIC",
           forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing port -1
#
#HSD 2780.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_no_pat_P1,
               bypassGlobal = "",
		       leakLowPatlist = "",
		       leakHighPatlist = "",
		       testMethod = "SERIAL",
		       deviceType = "STATIC",
			forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing port -1.
#
#HSD 2780.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_no_pat_P1,
               bypassGlobal = "",
		       leakLowPatlist = "",
		       leakHighPatlist = "",
		       testMethod = "PARALLEL",
		       deviceType = "DYNAMIC",
		       forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
		       lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
		       clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_input_file_P1,
           bypassGlobal = "",
		       leakageInputFile = "Leakage/Input_with_lcdps.txt",
		       testMethod = "SERIAL",
		       deviceType = "STATIC",
	         forceValue = "1.0 0.1 0.1",
		       forceLowValue = "1.0 0.1 0.1",
	         lowSpec = "-0.21 -0.018 -0.018",
		       highSpec = "0.21 0.022 0.022",
           clampLowValue = "-1.3 -0.025 -0.025",
		       clampHighValue = "1.3 0.025 0.025",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_noLCDPS_serial_static_execute_all_auto_range_no_pat_P1,
		       pins = "all_even all_odd",
		       leakLowPatlist = "",
		       leakHighPatlist = "",
		       testMethod = "SERIAL",
		       deviceType = "STATIC",
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.018 -0.018",
		       highSpec = "0.022 0.022",
		       clampLowValue = "-0.025 -0.025",
		       clampHighValue = "0.025 0.025",
		       manualMeasureRange = "AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_noLCDPS_parallel_dynamic_execute_all_auto_range_no_pat_P1,
		       pins = "all_even all_odd",
		       leakLowPatlist = "",
		       leakHighPatlist = "",
		       testMethod = "PARALLEL",
		       deviceType = "DYNAMIC",
		       forceValue = "0.1 0.1",
		       forceLowValue = "0.1 0.1",
		       lowSpec = "-0.018 -0.018",
		       highSpec = "0.022 0.022",
		       clampLowValue = "-0.025 -0.025",
		       clampHighValue = "0.025 0.025",
		       manualMeasureRange = "AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;


	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_static_execute_all_auto_range_hsdm_P1,
               bypassGlobal = "",
                       leakLowPatlist     = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                       leakHighPatlist    = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
                       timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                       level              = iVal65GDMLevelNom,
                       pins               = "LDPS all_even hsdm_rxp_all",
		       forceValue         = "1.0 0.1 0.25",
		       forceLowValue      = "1.0 0.1 0.25",
		       lowSpec            = "-0.21 -0.018 -0.06",
		       highSpec           = "0.21 0.022 0.06",
		       clampLowValue      = "-1.3 -0.025 -0.07",
		       clampHighValue     = "1.3 0.025 0.07",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_hsdm_P1,
           bypassGlobal = "",
           leakLowPatlist     = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
           leakHighPatlist    = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
           timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
           level              = iVal65GDMLevelNom,
           pins               = "LDPS all_even hsdm_rxp_all",
		       deviceType         = "DYNAMIC",
		       forceValue         = "1.0 0.1 0.25",
		       forceLowValue      = "1.0 0.1 0.25",
		       lowSpec            = "-0.21 0.018 -0.06",
		       highSpec           = "0.21 0.022 0.06",
		       clampLowValue      = "-1.3 -0.025 -0.07",
		       clampHighValue     = "1.3 0.025 0.07",
		       manualMeasureRange = "AUTO AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_input_file_hsdm_F3,
           bypassGlobal = "",
           leakLowPatlist     = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
           leakHighPatlist    = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
           timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
           level              = iVal65GDMLevelNom,
           pins               = "all_odd hsdm_rxp_all",
		       leakageInputFile   = "Leakage/Input_HSDM_with_lcdps.txt",
		       testMethod         = "SERIAL",
		       deviceType         = "STATIC",
		       forceValue         = "0.1 0.25",
		       forceLowValue      = "0.1 0.25",
		       lowSpec            = "0.018 -0.06",
		       highSpec           = "0.022 0.06",
		       clampLowValue      = "-0.025 -0.07",
		       clampHighValue     = "0.025 0.07",
		       manualMeasureRange = "AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_HSDMpins_serial_static_execute_all_auto_range_no_pat_P1,
		       pins               = "hsdm_rxp_all hsdm_rxn_all",
		       leakLowPatlist     = "",
		       leakHighPatlist    = "",
                       timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                       level              = iVal65GDMLevelNom,
		       testMethod         = "SERIAL",
		       deviceType         = "STATIC",
		       forceValue         = "0.1 0.25",
		       forceLowValue      = "0.1 0.25",
		       lowSpec            = "0.018 -0.06",
		       highSpec           = "0.022 0.06",
		       clampLowValue      = "-0.025 -0.07",
		       clampHighValue     = "0.025 0.07",
		       manualMeasureRange = "AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;

	tt_leakage(name = LeakageExecute_multiPin_$debugMode_$dlogDcMinMaxRslt_HSDMpins_parallel_dynamic_execute_all_auto_range_no_pat_P1,
		       pins               = "hsdm_rxp_all hsdm_rxn_all",
		       leakLowPatlist     = "",
		       leakHighPatlist    = "",
           timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
           level              = iVal65GDMLevelNom,
		       testMethod         = "PARALLEL",
		       deviceType         = "DYNAMIC",
	         forceValue         = "0.1 0.25",
		       forceLowValue      = "0.1 0.25",
		       lowSpec            = "0.018 -0.06",
		       highSpec           = "0.022 0.06",
		       clampLowValue      = "-0.025 -0.07",
		       clampHighValue     = "0.025 0.07",
		       manualMeasureRange = "AUTO AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;


}

COMPOSITE LeakageExecute_HSDM {
    DEF(leakLowPatlist     = "",
        leakHighPatlist    = "",
        timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
        level              = "iVal65GDMLevelNom",
        pins               = "hsdm_rxp_all hsdm_rxn_all",
        leakageInputFile   = "",
        leakTestType       = "BOTH",
        testMethod         = "PARALLEL",
        deviceType         = "STATIC",
        overrideLeakTests  = "EXECUTE_ALL",
        dlogDcMinMaxRslt   = "MIN_MAX",
        numOfWorstCase     = -1,
        forceValue         = "0.25 0.25",
        forceLowValue      = "0.25 0.25",
        lowSpec            = "-0.06 -0.06",
        highSpec           = "0.06 0.06",
        clampLowValue      = "-0.07 -0.07",
        clampHighValue     = "0.07 0.07",
        manualMeasureRange = "AUTO AUTO",
        userPause          = 0.1,
        datalogMode         = "ON",
        debugMode          = "VERBOSE",
        ignoreAlarm = "ALL_THREE",
        preinstance = "",
        maskPins	= "",
        bypassGlobal       = "");

        tt_leakage(name = "LeakageExecute_HSDM_NS_8X_BasicPass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_NS_10X_BasicPass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_10X_ClkEmbed_250DM_SDR_BasicPass_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_10X_ClkEmbed_250DM_SDR_BasicPass_list",
                   timings         = "Timing_65GDM_NS_10X_LSV_ClkEmbed_250DM_SDR_TC_fast",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_DS_8X_BasicPass_P1",
                   leakLowPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_DS_10X_BasicPass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_DS_10X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_DS_10X_ClkEmbed_250DM_SDR_list",
                   timings         = "Timing_65GDM_DS_10X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_DS_8X_Fail65GDM_F0",
                   leakLowPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail65GDM_list",
                   leakHighPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail65GDM_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_DS_8X_Fail250DM_F0",
                   leakLowPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail250DM_list",
                   leakHighPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail250DM_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_DS_8X_FailBoth_F0",
                   leakLowPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_FailBoth_list",
                   leakHighPatlist = "Leak_Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_FailBoth_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
 	
 	##Additionl Test cases to test other manual measure range of 6.5GDM PPMU
        
        tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_AUTO_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.2 0.2",
		   forceLowValue      = "0.2 0.2",
		   lowSpec            = "0.03 0.03",
		   highSpec           = "0.05 0.05",
		   clampLowValue      = "-0.095 -0.095",
		   clampHighValue     = "0.095 0.095",
		   manualMeasureRange = "AUTO AUTO",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
        
        tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_AUTO_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.3 0.3",
		   forceLowValue      = "0.3 0.3",
		   lowSpec            = "0.03 0.03",
		   highSpec           = "0.05 0.05",
		   clampLowValue      = "-0.095 -0.095",
		   clampHighValue     = "0.095 0.095",
		   manualMeasureRange = "AUTO AUTO",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;        
	
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_95mA_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.2 0.2",
		   forceLowValue      = "0.2 0.2",
		   lowSpec            = "0.03 0.03",
		   highSpec           = "0.05 0.05",
		   clampLowValue      = "-0.095 -0.095",
		   clampHighValue     = "0.095 0.095",
		   manualMeasureRange = "95mA 95mA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;

        tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_95mA_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.3 0.2",
		   forceLowValue      = "0.3 0.2",
		   lowSpec            = "0.03 0.03",
		   highSpec           = "0.05 0.05",
		   clampLowValue      = "-0.095 -0.095",
		   clampHighValue     = "0.095 0.095",
		   manualMeasureRange = "95mA 95mA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
       tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_6mA_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.02 0.02",
		   forceLowValue      = "0.02 0.02",
		   lowSpec            = "0.003 0.003",
		   highSpec           = "0.005 0.005",
		   clampLowValue      = "-0.006 -0.006",
		   clampHighValue     = "0.006 0.006",
		   manualMeasureRange = "6mA 6mA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;   
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_6mA_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   forceValue         = "0.02 0.02",
		   forceLowValue      = "0.02 0.02",
		   lowSpec            = "0.003 0.003",
		   highSpec           = "0.0035 0.005",
		   clampLowValue      = "-0.006 -0.006",
		   clampHighValue     = "0.006 0.006",
		   manualMeasureRange = "6mA 6mA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
        
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_600uA_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_600uA_Pass.txt",		   
		   forceValue         = "0.002 0.002",
		   forceLowValue      = "0.002 0.002",
		   lowSpec            = "0.0003 0.0003",
		   highSpec           = "0.0005 0.0005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "600uA 600uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;        
        
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_600uA_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_600uA_Fail.txt",		   
		   forceValue         = "0.003 0.003",
		   forceLowValue      = "0.003 0.003",
		   lowSpec            = "0.0003 0.0003",
		   highSpec           = "0.0005 0.0005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "600uA 600uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;


	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_60uA_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_60uA_Pass.txt",		   
		   forceValue         = "0.0002 0.0002",
		   forceLowValue      = "0.0002 0.0002",
		   lowSpec            = "0.00003 0.00003",
		   highSpec           = "0.00005 0.00005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "60uA 60uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;        
        
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_60uA_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_60uA_Fail.txt",		   
		   forceValue         = "0.0002 0.0002",
		   forceLowValue      = "0.0002 0.0002",
		   lowSpec            = "0.00003 0.00003",
		   highSpec           = "0.00005 0.00005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "60uA 60uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;

	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Pass_6uA_P1",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Pass.txt",		   
		   forceValue         = "0.00002 0.00002",
		   forceLowValue      = "0.00002 0.00002",
		   lowSpec            = "0.000003 0.000003",
		   highSpec           = "0.000005 0.000005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "6uA 6uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;        
        
	tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Fail_6uA_F3",
		   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
		   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
		   preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Fail.txt",		   
		   forceValue         = "0.00002 0.00002",
		   forceLowValue      = "0.00002 0.00002",
		   lowSpec            = "0.000003 0.000003",
		   highSpec           = "0.000005 0.000005",
		   clampLowValue      = "-0.001 -0.001",
		   clampHighValue     = "0.001 0.001",
		   manualMeasureRange = "6uA 6uA",)
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;          
}

COMPOSITE LeakageExecute_LCDPS
{
		DEF(
			SEGNAME = $name,
			numOfWorstCase = -1,
			leakageInputFile = "",
			datalogMode = ON,
			debugMode = OBNOXIOUS,
			leakLowPatlist = "Leak_basic_func_list",
			leakHighPatlist = "Leak_basic_func_list"
			timings =	 iValTimings50MHz,
			level = iValLevelMin,
			pins	=	"LDPS",
			leakTestType = BOTH,
			forceValue = "1.3",
			forceLowValue	= "0.1",
			lowSpec = "-0.1",
			highSpec = "0.3",
			clampLowValue	=	"-2",
			clampHighValue = "2",
			deviceType	= "STATIC",
			manualMeasureRange = "auto",
			testMethod	= PARALLEL,
			overrideLeakTests	= EXECUTE_ALL,
			dlogDcMinMaxRslt = MIN_MAX,
			userPause	= 0.1,
			bypassGlobal = "",
			ignoreAlarm = "ALL_THREE",
			preinstance = "",
			maskPins ="",
			postinstance = "iVal_utilityfunc!GenerateInstanceResults"
		);
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan5uA_P1",
			manualMeasureRange = "5uA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan5uA.txt",
			lowSpec = "2nA",
			highSpec = "6nA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;		

		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan50uA_P1",
			manualMeasureRange = "50uA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50uA.txt",
			lowSpec = "-49uA",
			highSpec = "49uA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan50uA_P1",
			manualMeasureRange = "50uA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan50uA.txt",
			lowSpec = "20nA",
			highSpec = "60nA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan500uA_P1",
			manualMeasureRange = "500uA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500uA.txt",
			lowSpec = "-499uA",
			highSpec = "499uA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan500uA_P1",
			manualMeasureRange = "500uA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan500uA.txt",
			lowSpec = "200nA",
			highSpec = "600nA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan5mA_P1",
			manualMeasureRange = "5mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan5mA.txt",
			lowSpec = "-4.9mA",
			highSpec = "4.9mA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan5mA_P1",
			manualMeasureRange = "5mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan5mA.txt",
			lowSpec = "2uA",
			highSpec = "6uA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan50mA_P1",
			manualMeasureRange = "50mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50mA.txt",
			lowSpec = "-49mA",
			highSpec = "49mA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan50mA_P1",
			manualMeasureRange = "50mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan50mA.txt",
			lowSpec = "20uA",
			highSpec = "60uA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;																		
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan500mA_P1",
			manualMeasureRange = "500mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500mA.txt",
			lowSpec = "-499mA",
			highSpec = "499mA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeHigherThan500mA_P1",
			manualMeasureRange = "500mA",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan500mA.txt",
			lowSpec = "200uA",
			highSpec = "600uA"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan4A_P1",
			manualMeasureRange = "4A",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
			clampLowValue	=	"-3.99",
			clampHighValue = "3.99",
			lowSpec = "-3.9A",
			highSpec = "3.9A"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThan4A_ignoreAlarm_NONE_Neg2",
			manualMeasureRange = "4A",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
			clampLowValue	=	"-3.99",
			clampHighValue = "3.99",
			lowSpec = "-3.9A",
			highSpec = "3.9A",
      ignoreAlarm ="NONE"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
		
    ## sgrygiel 2009-07-21
    ## To test clamp alarms
		tt_leakage(
			name = "LeakageExecute_LCDPS_CheckIsLCDPSRangeLowerThen4A_ignoreAlarm_NONE_Neg2",
			manualMeasureRange = "4A",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
			clampLowValue	=	"-3.99",
			clampHighValue = "3.99",
			lowSpec = "-3.9A",
			highSpec = "3.9A",
      ignoreAlarm = "NONE"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;

		tt_leakage(
			name = "LeakageExecute_LCDPS_InvalidMeasurementRange_F0",
			manualMeasureRange = "7A",
			preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
			clampLowValue	=	"-6.99",
			clampHighValue = "6.99",
			lowSpec = "-6.9A",
			highSpec = "6.9A"
		)				
		0?NEXT,
		1?NEXT,
		2?NEXT,
		3?NEXT;
								
}

COMPOSITE LeakageExecute_Pin_Mask
{
		
		DEF(SEGNAME = $name,
		manualMeasureRange = "AUTO",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		bypassAlaram = "",
		modifiedExpectPort = "F0",
		lcdpsLowExpectPort = "P1",
		lcdpsHighExpectPort = "P1",
		inputfileLcdpsExpectPort = "F0",
		inputfileBadLimitsExpectPort = "F3",
		localForce = "3.0",
		localForceLow = "3.0",
		localLowSpec = "-0.7",
		localHighSpec = "0.7",
		localClampLow = "-0.8",
		localClampHigh = "0.8",
		numOfWorstCase	= -1,
		leakageInputFile = "",
		datalogMode = ON,
		debugMode = VERBOSE,
		leakLowPatlist ="Leak_basic_func_list",
		leakHighPatlist	="Leak_basic_func_list",
		timings	= iValTimings50MHz,
		level 	= iValLevelMin,
		deviceType	= "STATIC",
		testMethod	= PARALLEL,
		overrideLeakTests = EXECUTE_ALL,
		dlogDcMinMaxRslt = MIN_MAX,
		userPause = 0.1,
		ignoreAlarm = "NONE",
		preinstance = "",
		bypassGlobal = "");

## Single DM250 Pins leakage		

	tt_leakage(name = LeakageExecute_single_pins_No_Pin_Mask_Both_Fail_F3,
			  pins 	= "P001 P002",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.01 0.01",
			  clampLowValue	= "-0.025 -0.025",
			  clampHighValue = "0.025 0.025",
			  maskPins = "",
			  manualMeasureRange = "AUTO"
			  bypassGlobal = "GL_BypassGlobal"
			  )
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
	
     tt_leakage(name = LeakageExecute_single_pins_One_Pin_Mask_Fail_F4,
			  pins 	= "P001 P002",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.01 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "P001",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT,
	4?NEXT;
	
tt_leakage(name = LeakageExecute_single_pins_All_Pin_Mask_Pass_P1,
			  pins 	= "P001 P002 P003",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1 0.1",
			  forceLowValue = "0.1 0.1 0.1",
			  lowSpec= "-0.01 -0.01 -0.01",
			  highSpec = "0.01 0.01 0.022",
        	          clampLowValue = "-0.025 -0.025 -0.025",
	                  clampHighValue = "0.025 0.025 0.025",
			  maskPins = "P001 P002",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;		
	
## DM250 Pins Groups leakage

tt_leakage(name = LeakageExecute_pingroups_No_Pin_Mask_all_even_Fail_F4,
			  pins 	= "all_odd all_even",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.022 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT,
	4?NEXT;

tt_leakage(name = LeakageExecute_pingroups_Single_Pin_Mask_Fail_F4,
			  pins 	= "all_odd all_even",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.022 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "P002 P004 P006",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT,
	4?NEXT;
	
tt_leakage(name = LeakageExecute_pingroups_Single_Pin_Mask_Pass_P1,
			  pins 	= "all_odd all_even",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.022 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "P002 P004 P006 P008 P010 P012 P014 P016 P018 P020",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;
tt_leakage(name = LeakageExecute_Pingroup_Mask_One_Group_Pass_P1,
			  pins 	= "all_odd all_even",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.022 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "all_even",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;	


tt_leakage(name = LeakageExecute_Pingroup_Mask_both_Group_Pass_P1,
			  pins 	= "all_odd all_even",
			  leakTestType = BOTH,
			  forceValue = "0.1 0.1",
			  forceLowValue = "0.1 0.1",
			  lowSpec= "-0.01 -0.01",
			  highSpec = "0.022 0.01",
                          clampLowValue = "-0.025 -0.025",
                          clampHighValue = "0.025 0.025",
			  maskPins = "all_odd all_even",
			  manualMeasureRange = "AUTO")
	0?NEXT,
	1?NEXT,
	2?NEXT,
	3?NEXT;		
	
##6.5GDM Pin/Group Masking Test cases

## Individual  Pins
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_BOTH_Single_Pin_No_Mask_Fail_F3",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "Rx1p Tx1n",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.04 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

tt_leakage(name = "LeakageExecute_HSDM_NS_8X_BOTH_Single_Pin_Mask_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "Rx1p Tx1n",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.04 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "Rx1p",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;        

## Pin groups
 tt_leakage(name = "LeakageExecute_HSDM_NS_8X_No_Mask_rxn_pins_Fail_F4",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   level              = "iVal65GDMLevelNom",
        	   leakTestType = BOTH,
        	   pins              = "hsdm_rxp_all hsdm_rxn_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.04",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins = "",
                   timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Mask_few_rxn_pins_Fail_F4",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "hsdm_rxp_all hsdm_rxn_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.04",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "Rx1n Rx2n Rx3n",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
	4?NEXT;
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Mask_all_rxn_pins_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "hsdm_rxp_all hsdm_rxn_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.04",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "Rx1n Rx2n Rx3n Rx4n Rx5n Rx6n Rx7n Rx8n Rx9n Rx10n Rx11n Rx12n",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Mask_rxn_Pingroup_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "hsdm_rxp_all hsdm_rxn_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.04",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "hsdm_rxn_all",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT; 

tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Mask_All_Pingroup_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "hsdm_rxp_all hsdm_rxn_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.04 0.04",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "hsdm_rxp_all hsdm_rxn_all",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;         
}        

COMPOSITE LeakageExecute_HS_Individual_Pin
{
		
		DEF(SEGNAME = $name,
		manualMeasureRange = "AUTO",
		ExpectPort = "P1",
		bypass = "GL_Bypass_Leakage_0",	
		bypass2 = "GL_Bypass_Leakage_1",
		bypassAlaram = "",
		modifiedExpectPort = "F0",
		lcdpsLowExpectPort = "P1",
		lcdpsHighExpectPort = "P1",
		inputfileLcdpsExpectPort = "F0",
		inputfileBadLimitsExpectPort = "F3",
		localForce = "3.0",
		localForceLow = "3.0",
		localLowSpec = "-0.7",
		localHighSpec = "0.7",
		localClampLow = "-0.8",
		localClampHigh = "0.8",
		numOfWorstCase	= -1,
		leakageInputFile = "",
		datalogMode = ON,
		debugMode = VERBOSE,
		leakLowPatlist ="Leak_basic_func_list",
		leakHighPatlist	="Leak_basic_func_list",
		timings	= iValTimings50MHz,
		level 	= iValLevelMin,
		deviceType	= "STATIC",
		testMethod	= PARALLEL,
		overrideLeakTests = EXECUTE_ALL,
		dlogDcMinMaxRslt = MIN_MAX,
		userPause = 0.1,
		ignoreAlarm = "NONE",
		preinstance = "",
		bypassGlobal = "");
		
		
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_Invalid_HS_Pin_Group_Fail_F0",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "hsdm_tx_all hsdm_rx_all",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT; 
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_VCC_Single_HS_Pin_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = VCC,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "Rx1p Rx1n",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_VSS_Single_HS_Pin_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = VSS,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "Tx1p Tx1n",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT; 
tt_leakage(name = "LeakageExecute_HSDM_NS_8X_BOTH_Single_HS_Pin_Pass_P1",
                   leakLowPatlist  = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakHighPatlist = "Leak_Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                   leakTestType = BOTH,
                   level              = "iVal65GDMLevelNom",
        	   pins              = "Rx1p Tx1n",
                   forceValue         = "0.25 0.25",
		   forceLowValue      = "0.25 0.25",
		   lowSpec            = "-0.06 -0.06",
		   highSpec           = "0.06 0.06",
		   clampLowValue      = "-0.07 -0.07",
		   clampHighValue     = "0.07 0.07",
		   manualMeasureRange = "AUTO",
		   maskPins	      = "",
                   timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;         
}        		
