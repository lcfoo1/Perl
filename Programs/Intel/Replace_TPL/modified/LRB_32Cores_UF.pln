
COMPOSITE LRB_32Cores_UF
{
	DEF (SEGNAME = $name,
		 whichSocketFile = "",                        			#Datatype=STRING, OPTIONAL
    		 globalDebugMode = "",	                         		#Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
    		 globalDatalogMode = "FALSE",                       		#Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
		 engineeringMode = "",		                        	#Datatype=STRING, OPTIONAL  #Choices : DISABLED, GET_USER_INPUT, SILENT
		 productName = "",				                #Datatype=STRING, OPTIONAL
		 locationCode = "",                             			#Datatype=INTEGER, OPTIONAL
		 testTemp = "",		                               		#Datatype=DOUBLE, OPTIONAL
		 corrWaferLot = "",			                        #Datatype=STRING, OPTIONAL  #Choices : DISABLED, ENABLED
		 verifyAllInstances = "",	                     		#Datatype=STRING, OPTIONAL  #Choices : DISABLED, ENABLED
		 engLocnGlobalName = "",                      			#Datatype=STRING, OPTIONAL
		 staticInstanceFilename = "",					#Datatype=STRING, OPTIONAL

		 # Common Test Class Parameters
	         debugMode = VERBOSE,
		 datalogMode = "ON",                              #Datatype=STRING, OPTIONAL  #Choices : ON, DISABLED, CAPTURE_ONLY
		 serialMode = "FALSE",                           #Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
		 bypassGlobal = "",                              #Datatype=STRING, OPTIONAL
		 preinstance = "",                               #Datatype=STRING, OPTIONAL
		 preplist = "",                                  #Datatype=STRING, OPTIONAL
		 postplist = "",                                 #Datatype=STRING, OPTIONAL
		 preburst = "",                                  #Datatype=STRING, OPTIONAL
		 postburst = "",                                 #Datatype=STRING, OPTIONAL
		 eotPowerDown = "FALSE",                         #Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
		 maskPins = "",                                  #Datatype=STRING, OPTIONAL
		 thermalMonitorMode = "DISABLED",                #Datatype=STRING, OPTIONAL  #Choices : DISABLED, PRETEST, POSTTEST, PREPOSTTEST
		 thermalMonitorOffsetCheck = "CHECK_LIMITS",     #Datatype=STRING, OPTIONAL  #Choices : CHECK_LIMITS, MEASURE_ONLY
		 thermalMonitorItuffTname = "",                  #Datatype=STRING, OPTIONAL
		 instanceProfile = "FALSE",                      #Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
		 plistCheck = "EMPTY_DISABLED",          #Datatype=STRING, OPTIONAL  #Choices : EMPTY_DISABLED, EMPTY_ONLY, DISABLED_ONLY, NOCHECK
		 ignoreAlarm = "NONE",                           #Datatype=STRING, OPTIONAL  #Choices : NONE, CLAMP_ONLY, SPIKE_ONLY, OSC_ONLY, CLAMP_SPIKE, CLAMP_OSC, SPIKE_OSC, ALL_THREE
		 relayToken = "",                                #Datatype=STRING, OPTIONAL
	 	 captureResult = CLEAR,	#Choices : DO_NOT_CLEAR, CLEAR
        
        	postinstance = "iVal_utilityfunc!GenerateInstanceResults",
        	patlist = basic_func_list_pass,
        	timings = iValTimings50MHz,
        	secondPassTimings = "",
        	maxCaptureFails = 1,
        	level = iValLevelFuncPass,
        	eapMode = EAP_OFF
        	ssidESequence = "",
        	ssidERecovery = "",
        	ssidGPwrdwn = NO,
        	ssidGRestore = "",
        	ssidOExecute = "FIRST_FAIL",
        );

	DEF (TEMPLATENAME = LRB32CORESUF, 
	TESTTYPE = EXECUTE, 
	TESTITEM = LRB32CORESUF, 
	TESTMODE = LRB32CORESUF, 
	DEBUGMODE = $debugMode,
	DESIREDOUT = "");
  	DEF (INSTANCENAME = $TEMPLATENAME_$TESTTYPE_$TESTITEM_$TESTMODE_$DEBUGMODE_$DESIREDOUT); 
	DEF (name = $INSTANCENAME, BINNAME = $INSTANCENAME, debugMode = $debugMode);


	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTMODE = SSID,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GLOBAL^CorTeXGlobals.iCGL_SSIDSetupName-./LRB_32Cores_UF_SSID.cfg!iVal_LRB_32Core"
	)
  	0?NEXT,
  	1?NEXT;

	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTMODE = GSDSINIT,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^CR_DI-00000000000000000000000000000000,SET_GSDS^TX_DI-00000000"
	)
  	0?NEXT,
  	1?NEXT;

    	tt_init (
		TEMPLATENAME = INIT,
		TESTMODE = MULTICORES, 
      		DESIREDOUT = P1,
	        whichSocketFile = "which_socket.txt",
	        globalDebugMode = FALSE,
	        engineeringMode = DISABLED,
	        productName = "ABCDEFGHIJ---T1--",
	        locationCode = 7721,
	        testTemp = 93.0,
	        corrWaferLot = DISABLED,
	        verifyAllInstances = DISABLED,
	        staticInstanceFilename = ""
		debugMode = "OBNOXIOUS",
		#postinstance = "LRB_32Cores!GetTXMapping"
		postinstance="Misc.dll!Call LRB_32Cores!GetTXMapping[SETUP]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
	)
    	0?NEXT,
    	1?NEXT;


        tt_multicores_func (
		TESTITEM = CACHE,
		TESTMODE = SERIAL, 
      		DESIREDOUT = P1,
		patlist = "cache_serial_list",
		#postplist = "LRB_32Cores!SetTXBit FINAL_TX-TX_DI TX-TX3 FINAL_CR-CR_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetTXBit[FINAL_TX-TX_DI TX-TX3 FINAL_CR-CR_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = ""
	)
        0?NEXT,
        1?NEXT;


        tt_multicores_func (
		TESTITEM = CORE,
		TESTMODE = SERIAL, 
      		DESIREDOUT = P1,
		patlist = "core_serial_list",
		#postplist = "LRB_32Cores!SetSerialBit BIT-CR7 FINAL_CR-CR_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetSerialBit[BIT-CR7 FINAL_CR-CR_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = ""
	)
        0?NEXT,
        1?NEXT;


        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = TXLEFT, 
      		DESIREDOUT = P1,
		patlist = "basic_func_tx_left_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI FINAL_TX-TX_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI FINAL_TX-TX_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic_tx_left"
	)
        0?NEXT,
        1?NEXT;

        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = TXRIGHT, 
      		DESIREDOUT = P1,
		patlist = "basic_func_tx_right_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI FINAL_TX-TX_DI PORTS-1,24^2,23^0,0",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI FINAL_TX-TX_DI PORTS-1,24^2,23^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic_tx_right"
	)
        0?NEXT,
        1?NEXT;


        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = FUNC, 
      		DESIREDOUT = P1,
		patlist = "basic_func_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI PORTS-1,32^2,31^0,0",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI PORTS-1,32^2,31^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic"
	)
        0?NEXT,
        1?NEXT;

        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = FUNC, 
      		DESIREDOUT = P2,
		patlist = "basic_func_list",
		preinstance = "IDT.dll!DFF_GSDS SET_GSDS^CR_DI-00000000000000000000000000000001,SET_GSDS^TX_DI-00000000",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI PORTS-1,32^2,31^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic"
	)
        0?NEXT,
        1?NEXT;

        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = FUNC, 
      		DESIREDOUT = F0,
		patlist = "basic_func_list",
		preinstance = "IDT.dll!DFF_GSDS SET_GSDS^CR_DI-00000000000000000000000000000011,SET_GSDS^TX_DI-00000000",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI PORTS-1,32^2,31^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic"
	)
        0?NEXT,
        1?NEXT;

Second:

	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTMODE = GSDSINIT2,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^CR_DI-00000000000000000000000000000000,SET_GSDS^TX_DI-00000000"
	)
  	0?NEXT,
  	1?NEXT;

        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = FUNC2, 
      		DESIREDOUT = P1,
		patlist = "basic_func_2_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI PORTS-1,23^2,22^0,0",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI PORTS-1,23^2,22^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic"
	)
        0?NEXT,
        1?NEXT;

        tt_multicores_func (
		TESTITEM = CACHE,
		TESTMODE = SERIAL2, 
      		DESIREDOUT = P1,
		patlist = "cache_serial_2_list",
		#postplist = "LRB_32Cores!SetTXBit FINAL_TX-TX_DI TX-TX6 FINAL_CR-CR_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetTXBit[FINAL_TX-TX_DI TX-TX6 FINAL_CR-CR_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = ""
	)
        0?NEXT,
        1?NEXT;


        tt_multicores_func (
		TESTITEM = CORE,
		TESTMODE = SERIAL2, 
      		DESIREDOUT = P1,
		patlist = "core_serial_2_list",
		#postplist = "LRB_32Cores!SetSerialBit BIT-CR5 FINAL_CR-CR_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetSerialBit[BIT-CR5 FINAL_CR-CR_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = ""
	)
        0?NEXT,
        1?NEXT;


        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = TXLEFT2, 
      		DESIREDOUT = P1,
		patlist = "basic_func_tx_left_2_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI FINAL_TX-TX_DI",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI FINAL_TX-TX_DI]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic_tx_left_2"
	)
        0?NEXT,
        1?NEXT;

        tt_multicores_func (
		TESTITEM = BASIC,
		TESTMODE = TXRIGHT2, 
      		DESIREDOUT = P1,
		patlist = "basic_func_tx_right_2_list",
		#postinstance = "LRB_32Cores!SetPortAndGSDSVars FINAL_CR-CR_DI FINAL_TX-TX_DI PORTS-1,32^2,30^0,0",
		postinstance="Misc.dll!Call LRB_32Cores!SetPortAndGSDSVars[FINAL_CR-CR_DI FINAL_TX-TX_DI PORTS-1,32^2,30^0,0]+iVal_utilityfunc!GenerateInstanceResults[Capture]",
		ssidESequence = "Exec_basic_tx_right_2"
	)
        0?NEXT,
        1?NEXT;

	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTMODE = SetFinalCoreResult,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "LRB_32Cores!SetFinalTX",
		functionParameter = "FINAL_CR-CR_DI FINAL_TX-TX_DI PORTS-1,27^2,26^0,0",
	)
  	0?NEXT,
  	1?NEXT;

	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTMODE = Display,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "DISPLAY",
	)
  	0?NEXT,
  	1?NEXT;
}
