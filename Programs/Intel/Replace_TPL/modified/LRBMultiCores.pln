COMPOSITE LRBMultiCores
{
	DEF (
	BMFCFILE = "LRBMultiCores/BMFC.xml",

	whichSocketFile = "",                        			#Datatype=STRING, OPTIONAL
    	globalDebugMode = "",	                         		#Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
    	globalDatalogMode = "FALSE",                       		#Datatype=STRING, OPTIONAL  #Choices : FALSE, TRUE
	engineeringMode = "",		                        	#Datatype=STRING, OPTIONAL  #Choices : DISABLED, GET_USER_INPUT, SILENT
	productName = "",				                #Datatype=STRING, OPTIONAL
	locationCode = "",                             			#Datatype=INTEGER, OPTIONAL
	testTemp = "",		                               		#Datatype=DOUBLE, OPTIONAL
	corrWaferLot = "",			                        #Datatype=STRING, OPTIONAL  #Choices : DISABLED, ENABLED
	verifyAllInstances = "",	                     		#Datatype=STRING, OPTIONAL  #Choices : DISABLED, ENABLED
	engLocnGlobalName = "",                      			#Datatype=STRING, OPTIONAL
	staticInstanceFilename = "",					#Datatype=STRING, OPTIONAL

	# Common Test Class Parmaeters
	preinstance = "",
	preplist = "",
	postplist = "",
	preburst = "",
	postburst = "",
	eotPowerDown = FALSE,						#Choices : FALSE, TRUE
	maskPins = "",
	thermalMonitorMode = DISABLED,					#Choices : DISABLED, PRETEST, POSTTEST, PREPOSTTEST
	thermalMonitorOffsetCheck = CHECK_LIMITS,			#Choices : CHECK_LIMITS, MEASURE_ONLY
	thermalMonitorItuffTname = "",
	instanceProfile = FALSE,					#Choices : FALSE, TRUE
	plistCheck = EMPTY_DISABLED,				#Choices : EMPTY_DISABLED, EMPTY_ONLY, DISABLED_ONLY, NOCHECK
	ignoreAlarm = NONE,						#Choices : NONE, CLAMP_ONLY, SPIKE_ONLY, OSC_ONLY, CLAMP_SPIKE, CLAMP_OSC, SPIKE_OSC, ALL_THREE
	ssidESequence = "",
	ssidERecovery = "",
	ssidGPwrdwn = NO,				#Choices : NO, YES
	relayToken = "",
	ssidOExecute = FIRST_FAIL,	#Choices : FORCE_ALL, FIRST_FAIL
	captureResult = CLEAR,	#Choices : DO_NOT_CLEAR, CLEAR

	ituffVerbosity = "BRIEF",					#BRIEF, VERBOSE, OBNOXIOUS
	debugMode = "VERBOSE",						#DISABLED, BRIEF, VERBOSE, OBNOXIOUS
   	datalogMode = ON,						#Choices : ON, DISABLED
	binMatrixFilePath = "", 
	activeBingroupUservar = "SC_ActiveBinGroup_Product",
	operatingMode = "CLEAR_DUT_DATA",
	loopMode = "VLOOP",
	activeTestDomain = "",
	portToTestValue = "",
	invalidFlows = "",
	dffTokenName = "",
	dffTokenValue = "",
	defaultHardBin = 1,
	enableextendedbinning = "DISABLED",
	bypassGlobal = "",
	postinstance = "iVal_utilityfunc!GenerateInstanceResults",
	preinstance = "",
	setcomma =",",
	setctsclocn = "SET_GLOBAL^CTSCVars.SC_LOCN-"
	sclocn = "7721"
        secondPassTimings = "",
        maxCaptureFails = 1,
        eapMode = EAP_OFF
        ssidESequence = "",
        ssidERecovery = "",
        ssidGPwrdwn = NO,
        ssidGRestore = "",
        ssidOExecute = "FIRST_FAIL",
        );

	DEF (TEMPLATENAME = LRBMULTICORES, 
	TESTTYPE = EXECUTE, 
	TESTITEM = "", 
	TESTMODE = DFM, 
	DEBUGMODE = $debugMode,
	DESIREDOUT = "");
  	DEF (INSTANCENAME = $TEMPLATENAME_$TESTTYPE_$TESTITEM_$TESTMODE_$DEBUGMODE_$DESIREDOUT); 
	DEF (name = $INSTANCENAME, BINNAME = $INSTANCENAME, debugMode = $debugMode);


	tt_userfunc (
		TESTITEM = SETLOCN,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = $setctsclocn$sclocn
	)
  	0?NEXT,
  	1?NEXT;

    	tt_init (
		TEMPLATENAME = INIT,
		TESTMODE = INIT, 
      		DESIREDOUT = P1,
	        whichSocketFile = "which_socket.txt",
	        globalDebugMode = FALSE,
	        engineeringMode = DISABLED,
	        productName = "ABCDEFGHIJ---T1--",
	        locationCode = 7721,
	        testTemp = 93.0,
	        corrWaferLot = DISABLED,
	        verifyAllInstances = DISABLED,
	        staticInstanceFilename = ""
	)
	        
    	0?NEXT,
    	1?NEXT;

	CR_DI_Execute (COMPNAME = CR_DI_Execute)
	0?NEXT,
	1?NEXT; 

}

COMPOSITE CR_DI_Execute
{ 

	tt_binmatrixflowcontrol (
		TEMPLATENAME = ClearDUTData,
		TESTITEM = BFMC,
		TESTMODE = VLOOP, 
      		DESIREDOUT = P1,	
		debugMode = "DISABLED",
       	       	binMatrixFilePath = $BMFCFILE, 
    		activeBingroupUservar = "SC_ActiveBinGroup_Product",
		loopMode = "VLOOP",
  		activeTestDomain = "core_freq",
		defaultHardBin = 1,
    		operatingMode = "CLEAR_DUT_DATA"
	)
  	0?NEXT (BINSUM=BIN, BIN=3, INCR=1201, BINNAME=csi_min_fail_bin),
  	1?NEXT (BINSUM=BIN, BIN=1, INCR=014, BINNAME=bmfc_pass_clear_dut);

	##############################################################################
    	# Test Description: Get DFF data
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_ube (
		TEMPLATENAME = UBE,
		TESTITEM = DFF,
		TESTMODE = DOWNLOAD,
    		DESIREDOUT = P1, 
		ubeGlobal = "",
		ubeField = "",
		datalogMode = "ON",
		bypassGlobal = "",
		dffLogForAries = "ENABLED",
            	dffLogMegaToken = "ENABLED",	
        )
       	1?NEXT,
       	0?NEXT;

	tt_lrbmulticores (
		TESTITEM = INIT,
      		DESIREDOUT = P1,
		configFile = "./LRBMultiCores/multicores_ALL.xml",
		preinstance = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT,
  	2?NEXT,
  	3?NEXT,
  	4?NEXT,
  	5?NEXT;
 
	tt_userfunc (
		TEMPLATENAME = SETDFM, 
		TESTITEM = LEVEL,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GLOBAL^_UserVars.CaptureMode-0",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;


	CR_DI_$TESTMODE_Execute (COMPNAME = CR_DI_$TESTMODE_Execute, prefix="", TESTMODE = DFM)
	0?NEXT,
	1?NEXT;

	tt_userfunc (
		TEMPLATENAME = SETDMEM, 
		TESTITEM = LEVEL,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GLOBAL^_UserVars.CaptureMode-1",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	CR_DI_$TESTMODE_Execute (COMPNAME = CR_DI_$TESTMODE_Execute, prefix="10", TESTMODE = DMEM)
	0?NEXT,
	1?NEXT;

	tt_binmatrixflowcontrol (
		TEMPLATENAME = SetDUTFinalData,
		TESTITEM = BMFC,
		TESTMODE = VLOOP, 
      		DESIREDOUT = P1,
               	binMatrixFilePath = $BMFCFILE, 
    		activeBingroupUservar = "SC_ActiveBinGroup_Product",
    		operatingMode = "SET_DUT_FINAL_DATA",
  		activeTestDomain = "core_freq",
		loopMode = "VLOOP",
		defaultHardBin = 1,
    		enableextendedbinning = "ENABLED",
    		defaultHardBin = 6901
	)
  	0?NEXT,
  	1?NEXT; 


}


COMPOSITE CR_DI_$TESTMODE_Execute
{
	DEF (
		select = "OASIS_GEN_LRBMultiCores_tt.dll!MulticoresSelect ",
		MulticoreSelect = "2",
		preplist = "",
		postplist = "",
		#postplist = "OASIS_GEN_LRBMultiCores_tt.dll!tProcessMultiCoresData",
		#postinstance = "OASIS_GEN_LRBMultiCores_tt.dll!tProcessMultiCoresData",
		preinstance = $select$prefix$MulticoreSelect
	);
  	##############################################################################  

	##############################################################################
    	# Test Description: 	Single pattern - check for master core matching and
	#			OR all CTV
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = SINGLEPATTERN,
      		DESIREDOUT = P1,	
		patlist = basic_func_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "2"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - check for master core matching and
	#			OR all CTV
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = MASTERCORE,
      		DESIREDOUT = P1,	
		patlist = basic_two_func_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "2"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - detect multicores_select from 
	#			level parameter with MulticoresSelect UF
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = LEVELSELECT,
      		DESIREDOUT = P1,	
		patlist = basic_two_func_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		preinstance = ""
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - check for master core matching and
	#			OR all CTV
    	# Expected Behavior: Fail, exit port 2.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = MASTERCORE,
      		DESIREDOUT = P2,
		patlist = basic_two_func_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "3"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Multiple patterns - check for bit decode as ACED and
	#			OR all CTV
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = ACED,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "4"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;
	
	##############################################################################
    	# Test Description: 	Multiple patterns - check for bit decode as ACED and
	#			OR all CTV
    	# Expected Behavior: Fail, exit port 3.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = BADACED,
      		DESIREDOUT = P3,
		patlist = basic_func_bad_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "4"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - check for 48 bits
    	# Expected Behavior: Fail, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = COMPARE48BIT,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "5"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Multiple patterns - check for 48 bits
	#			OR all CTV
    	# Expected Behavior: Fail, exit port 4.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = COMPARE48BIT,
      		DESIREDOUT = P4,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "6"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;



	##############################################################################
    	# Test Description: 	Multiple patterns - set static GSDS key
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = SETSTATICGSDS,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "7"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = SETDYNGSDS_FLOW1,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "8"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;

	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = GETGSDS_FLOW1,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "GET_GSDS^GSDS_CR_DI_32_1100000000_8-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;


    	###############################################################################
    	# Test Description: Set flow info instance
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
    	tt_binmatrixflowcontrol (
		TEMPLATENAME = DisableFlow12,
		TESTITEM = BMFCVLOOP,
    		DESIREDOUT = P1,
		debugMode = "DISABLED",
       	       	binMatrixFilePath = $BMFCFILE,
    		activeBingroupUservar = "SC_ActiveBinGroup_Product",
  		operatingMode = "SET_FLOW_INFO",
  		activeTestDomain = "core_freq",
  		invalidFlows = "1,2,3",
  		dffTokenName = "",
  		dffTokenValue = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
        )
     	0?NEXT,
     	1?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_lrbmulticorefunc (
		TESTITEM = SETDYNGSDS_FLOW4,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "8"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = GETGSDS_FLOW4,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "GET_GSDS^GSDS_CR_DI_28_900000000_8-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;




	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = SETGSDS_F4,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^GSDS_CR_DI_28_900000000_8-00000000000000011000000010001011-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	tt_lrbmulticorefunc (
		TESTITEM = ORDYNGSDS_FLOW4,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "9"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = GETOR_GSDS_FLOW4,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "GET_GSDS^GSDS_CR_DI_28_900000000_8-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC
    	# Expected Behavior: Pass, exit port -1.
    	############################################################################## 
	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = SETGSDS_FNeg1,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^GSDS_CR_DI_28_900000000_8-0-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	tt_lrbmulticorefunc (
		TESTITEM = ORDYNGSDS_FNeg1,
      		DESIREDOUT = FNeg1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "9"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC with Mask
    	# Expected Behavior: Pass, exit port -1.
    	############################################################################## 
	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = SETGSDS_32CORES,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^GSDS_CR_DI_28_900000000_8-00000000000000011000000010001011-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	tt_lrbmulticorefunc (
		TESTITEM = MASKGSDS_32CORES,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "10"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Multiple patterns - set dynamic GSDS key from BMFC with Mask
    	# Expected Behavior: Pass, exit port -1.
    	############################################################################## 
	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = SETGSDS_48CORES,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "SET_GSDS^GSDS_CR_DI_28_900000000_8-101011001110110100000000000000011000000010001011-UNT",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;

	tt_lrbmulticorefunc (
		TESTITEM = MASKGSDS_48CORES,
      		DESIREDOUT = P1,
		patlist = basic_two_func_aced_list,
		timings = iValTimings50MHz,
        	level = iValLevelFuncPass,
		MulticoreSelect = "11"
    	)
    	0?NEXT,
    	1?NEXT,
    	2?NEXT,
    	3?NEXT,
    	4?NEXT,
    	5?NEXT;


	##############################################################################
    	# Test Description: 	Display all GSDS
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 


	tt_userfunc (
		TEMPLATENAME = UF, 
		TESTITEM = DISPLAYALLGSDS,
      		DESIREDOUT = P1,
		datalogMode = "ON",
		functionName = "IDT.dll!DFF_GSDS",
		functionParameter = "DISPLAY",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
	)
  	0?NEXT,
  	1?NEXT;


	###############################################################################
    	# Test Description: Set flow info instance
    	# Expected Behavior: Pass, exit port 1.
    	############################################################################## 
    	tt_binmatrixflowcontrol (
		TEMPLATENAME = SetFlowInfo,
		TESTITEM = BFMCVLOOP, 
    		DESIREDOUT = P1,
		debugMode = "DISABLED",
       	       	binMatrixFilePath = $BMFCFILE,
    		activeBingroupUservar = "SC_ActiveBinGroup_Product",
  		operatingMode = "SET_FLOW_INFO",
  		activeTestDomain = "core_freq",
  		invalidFlows = "",
  		dffTokenName = "",
  		dffTokenValue = "",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults"
        )
  	0?1,
  	1?1;

       tt_librarymgr (
		TEMPLATENAME = LibraryManager,
		TESTITEM = Unload,
   	        DESIREDOUT = P1,                
                bypassGlobal = "",
		debugMode = "DISABLED",
		postinstance = "iVal_utilityfunc!GenerateInstanceResults")
   	-2?1,
   	-1?1,
   	0?1,
   	1?1;

}

