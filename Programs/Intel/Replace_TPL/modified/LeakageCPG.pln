
COMPOSITE LeakageCPG
{
        LeakageCPG_Verify (COMPNAME = Leakage_Verify)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_Execute (COMPNAME = Leakage_Execute)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_Verify
{
        # LeakageVerifyCPG_DEBUG_OBNOXIOUS (COMPNAME = LeakageVerifyCPG_DEBUG_OBNOXIOUS)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        LeakageVerifyCPG_DEBUG_VERBOSE (COMPNAME = LeakageVerifyCPG_DEBUG_VERBOSE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        # LeakageVerifyCPG_DEBUG_BRIEF (COMPNAME = LeakageVerifyCPG_DEBUG_BRIEF)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        LeakageVerifyCPG_DEBUG_DISABLED (COMPNAME = LeakageVerifyCPG_DEBUG_DISABLED)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


}

COMPOSITE LeakageCPG_Execute
{
        # LeakageExecuteCPG_DEBUG_OBNOXIOUS (COMPNAME = LeakageExecuteCPG_DEBUG_OBNOXIOUS)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        LeakageCPG_StaticVerify_Check (COMPNAME = LeakageCPG_StaticVerify_Check)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPGExecute_PGInputFile (COMPNAME = LeakageCPGExecute_PGInputFile)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageExecuteCPG_DEBUG_VERBOSE (COMPNAME = LeakageExecuteCPG_DEBUG_VERBOSE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        # LeakageExecuteCPG_DEBUG_BRIEF (COMPNAME = LeakageExecuteCPG_DEBUG_BRIEF)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        LeakageExecuteCPG_DEBUG_DISABLED (COMPNAME = LeakageExecuteCPG_DEBUG_DISABLED)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageExecuteCPG_HSDM (COMPNAME = LeakageExecuteCPG_HSDM)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ### HSDs: 2942 (Leakage test does not accept LDPS pin measurement ranges) ###
        LeakageExecuteCPG_LCDPS (COMPNAME = LeakageExecuteCPG_LCDPS)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ### HSDs: 4107 (Leakage template masking pins parameter do not work) ###
        LeakageExecuteCPG_Pin_Mask (COMPNAME = LeakageExecuteCPG_Pin_Mask)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ### HSDs: 4104 (Leakage template do not allow put pin name for 65GDM modules) ###
        LeakageExecuteCPG_HS_Individual_Pin (COMPNAME = LeakageExecuteCPG_HS_Individual_Pin)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageCPGExecute_PGInputFile {
        DEF(    SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName           =                       "",
                datalogMode              =                       ON,
                debugMode               =                       VERBOSE,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                pins                    =                       "all_pins",
                leakTestType            =                       BOTH,
                forceValue              =                       0.1,
                forceLowValue           =                       0.1,
                lowSpec                 =                       0.018,
                highSpec                =                       0.022,
                clampLowValue           =                       -0.025,
                clampHighValue          =                       0.025,
                deviceType              =                       "STATIC",
                manualMeasureRange      =                       "AUTO",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults",
                filepostfix1            =                       "Input_low_limit",
                preinstance             =                       "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_AUTO_Pass.txt",
                ignoreAlarm             =                       "ALL_THREE");

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_VERBOSE_128mA_P1,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputBad1_VSS_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_bad1.xml",
                      configSetName = "Input_group1_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_PGInputBad2_VSS_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_bad1.xml",
                      configSetName = "Input_group2_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_PGInputBad3_VSS_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "P001",
                      leakageInputFile = "Leakage/leakage_input_bad2.xml",
                      configSetName = "Input_group2_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VCC_VERBOSE_128mA_P1,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_BOTH_VERBOSE_128mA_P1,
                      leakTestType            =                       BOTH,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_BOTH_PG")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_lowlimit_VERBOSE_128mA_F3,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_PG_lowlimit")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VCC_lowlimit_VERBOSE_128mA_F3,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC_PG_lowlimit")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_BOTH_lowlimit_VERBOSE_128mA_F3,
                      leakTestType            =                       BOTH,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_BOTH_PG_lowlimit")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_duplicate_pin_same_limit_VERBOSE_128mA_P1,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_PG_duplicate_pin_same_limit")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_duplicate_pin_diff_limit_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_PG_duplicate_pin_diff_limit")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_pin_not_exist_in_pins_param_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins                    =                       "all_odd",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_PG_pin_not_exist_in_pins_param")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_PGInputFile_VSS_pin_not_exist_in_input_file_VERBOSE_128mA_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_PG_pin_not_exist_in_input_file")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

 }

COMPOSITE LeakageCPG_StaticVerify_Check {
        DEF(    SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName           =                       "",
                datalogMode              =                       ON,
                debugMode               =                       VERBOSE,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                pins                    =                       "all_pins",
                leakTestType            =                       BOTH,
                forceValue              =                       0.1,
                forceLowValue           =                       0.1,
                lowSpec                 =                       0.018,
                highSpec                =                       0.022,
                clampLowValue           =                       -0.025,
                clampHighValue          =                       0.025,
                deviceType              =                       "STATIC",
                manualMeasureRange      =                       "AUTO",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults",
                filepostfix1            =                       "Input_low_limit",
                preinstance             =                       "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_AUTO_Pass.txt",
                ignoreAlarm             =                       "ALL_THREE");
        
        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_with_good_limits_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_with_good_limits_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VSS_input_file_with_good_limits_VERBOSE_AUTO_P1",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter =  "")
        1?NEXT,
        0?NEXT;

        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_1type_port3_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_1type_port3_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VSS_input_file_1type_port3_VERBOSE_AUTO_F3",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter =  "")
        1?NEXT,
        0?NEXT;

        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_2type_port4_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_2type_port4_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VSS_input_file_2type_port4_VERBOSE_AUTO_F4",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter =  "")
        1?NEXT,
        0?NEXT;

        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_3type_port5_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VSS_input_file_3type_port5_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VSS_input_file_3type_port5_VERBOSE_AUTO_F5",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;


        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_boundary_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_boundary_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_boundary_VERBOSE_AUTO_P1",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;

        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_VERBOSE_AUTO_P1",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;
        
        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam1_VERBOSE_AUTO_F0,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam1_VERBOSE_AUTO_F0",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam1_VERBOSE_AUTO_F0 leak_test_type UNKNOWN",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;        
        
        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam2_VERBOSE_AUTO_F0,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam2_VERBOSE_AUTO_F0",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam2_VERBOSE_AUTO_F0 leak_test_type UNDEFINED",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;                          
        
	tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam3_VERBOSE_AUTO_F0,
		    debugMode = BRIEF,
		    datalogMode = ON,
		    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam3_VERBOSE_AUTO_F0",
		    bypassGlobal = "",
		    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam3_VERBOSE_AUTO_F0 single_group_execution UNDEFINED",
		    functionName = "iVal_utilityfunc!DummyUF",
		    functionParameter = "" )
	1?NEXT,
        0?NEXT;      

	tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam5_VERBOSE_AUTO_F0,
		    debugMode = BRIEF,
		    datalogMode = ON,
		    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam5_VERBOSE_AUTO_F0",
		    bypassGlobal = "",
		    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam5_VERBOSE_AUTO_F0 test_method UNDEFINED",
		    functionName = "iVal_utilityfunc!DummyUF",
		    functionParameter = "" )
	1?NEXT,
        0?NEXT;     
        
	tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam6_VERBOSE_AUTO_F0,
		    debugMode = BRIEF,
		    datalogMode = ON,
		    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam6_VERBOSE_AUTO_F0",
		    bypassGlobal = "",
		    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam6_VERBOSE_AUTO_F0 device_type UNDEFINED",
		    functionName = "iVal_utilityfunc!DummyUF",
		    functionParameter = "" )
	1?NEXT,
        0?NEXT;     
        
	tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam7_VERBOSE_AUTO_F0,
		    debugMode = BRIEF,
		    datalogMode = ON,
		    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam7_VERBOSE_AUTO_F0",
		    bypassGlobal = "",
		    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam7_VERBOSE_AUTO_F0 override_leak_tests UNDEFINED",
		    functionName = "iVal_utilityfunc!DummyUF",
		    functionParameter = "" )
	1?NEXT,
        0?NEXT;             
	tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam8_VERBOSE_AUTO_F0,
		    debugMode = BRIEF,
		    datalogMode = ON,
		    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam8_VERBOSE_AUTO_F0",
		    bypassGlobal = "",
		    preinstance = "iVal_utilityfunc!SetTestInstanceParamValue LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam8_VERBOSE_AUTO_F0 dlog_dc_min_max_rslt UNDEFINED",
		    functionName = "iVal_utilityfunc!DummyUF",
		    functionParameter = "" )
	1?NEXT,
        0?NEXT;             
        
        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_no_typeVERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_no_typeVERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_no_typeVERBOSE_AUTO_F3",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "" )
        1?NEXT,
        0?NEXT;

        tt_userfunc_LeakageCPG(name = Verify_Test_LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_VERBOSE_AUTO_P1,
                    debugMode = BRIEF,
                    datalogMode = ON,
                    postinstance = "iVal_utilityfunc!GenerateIPOInstanceResults Verify_Test_LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_VERBOSE_AUTO_P1",
                    bypassGlobal = "",
                    preinstance = "iVal_utilityfunc!VerifyInstance LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_VERBOSE_AUTO_F3",
                    functionName = "iVal_utilityfunc!DummyUF",
                    functionParameter = "")
        1?NEXT,
        0?NEXT;
,

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VSS_input_file_with_good_limits_VERBOSE_AUTO_P1,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VSS_input_file_1type_port3_VERBOSE_AUTO_F3,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port3")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VSS_input_file_2type_port4_VERBOSE_AUTO_F4,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port4")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VSS_input_file_3type_port5_VERBOSE_AUTO_F5,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port5")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_boundary_VERBOSE_AUTO_P1,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC_boundary")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_input_file_with_good_limits_VERBOSE_AUTO_P1,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam1_VERBOSE_AUTO_F0,
                      #leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam2_VERBOSE_AUTO_F0,
                      #leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        
	tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam3_VERBOSE_AUTO_F0,
		      #leakTestType            =                       VCC,
		      singleGroupExecution = "DISABLED",
		      superPinGroup="",
		      leakageInputFile = "Leakage/leakage_input_file.xml",
		      configSetName = "Input_VCC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
	tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam5_VERBOSE_AUTO_F0,
		      #leakTestType            =                       VCC,
		      singleGroupExecution = "DISABLED",
		      superPinGroup="",
		      leakageInputFile = "Leakage/leakage_input_file.xml",
		      configSetName = "Input_VCC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
	tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam6_VERBOSE_AUTO_F0,
		      #leakTestType            =                       VCC,
		      singleGroupExecution = "DISABLED",
		      superPinGroup="",
		      leakageInputFile = "Leakage/leakage_input_file.xml",
		      configSetName = "Input_VCC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
	tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam7_VERBOSE_AUTO_F0,
		      #leakTestType            =                       VCC,
		      singleGroupExecution = "DISABLED",
		      superPinGroup="",
		      leakageInputFile = "Leakage/leakage_input_file.xml",
		      configSetName = "Input_VCC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
	tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_VCC_preinst_chgparam8_VERBOSE_AUTO_F0,
		      #leakTestType            =                       VCC,
		      singleGroupExecution = "DISABLED",
		      superPinGroup="",
		      leakageInputFile = "Leakage/leakage_input_file.xml",
		      configSetName = "Input_VCC")
	0?NEXT,
	1?NEXT,
	2?NEXT,
        3?NEXT;
        
        
        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_no_typeVERBOSE_AUTO_F3,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_low_limit_no_type")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_StaticVerify_input_file_with_bad_limits_VERBOSE_AUTO_F3,
                      leakLowPatlist = "basic_func_list",
                      leakHighPatlist = "basic_func_list",
                      timings = "iValTimings50MHz",
                      level = "iValLevelMin",
                      pins = "all_pins",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix1,
                      bypassGlobal = "",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                      maskPins = "",
                      ignoreAlarm = "ALL_THREE")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


}

COMPOSITE LeakageVerifyCPG_DEBUG_DISABLED
{
        DEF (debugMode = "DISABLED",
             preinstance = "",
             ignoreAlarm = "ALL_THREE",
             bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
             bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Invalid_Params (COMPNAME = LeakageCPG_$debugMode_Invalid_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Required_Params (COMPNAME = LeakageCPG_$debugMode_Required_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Manual_Range (COMPNAME = LeakageCPG_$debugMode_Manual_Range)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageVerifyCPG_DEBUG_BRIEF
{
        DEF (debugMode = "BRIEF",
             preinstance = "",
             ignoreAlarm = "ALL_THREE",
             bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
             bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Invalid_Params (COMPNAME = LeakageCPG_$debugMode_Invalid_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Required_Params (COMPNAME = LeakageCPG_$debugMode_Required_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Manual_Range (COMPNAME = LeakageCPG_$debugMode_Manual_Range)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageVerifyCPG_DEBUG_VERBOSE
{
        DEF (debugMode = "VERBOSE",
             preinstance = "",
             ignoreAlarm = "ALL_THREE",
             bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
             bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Invalid_Params (COMPNAME = LeakageCPG_$debugMode_Invalid_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Required_Params (COMPNAME = LeakageCPG_$debugMode_Required_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Manual_Range (COMPNAME = LeakageCPG_$debugMode_Manual_Range)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageVerifyCPG_DEBUG_OBNOXIOUS
{
        DEF (debugMode = "OBNOXIOUS",
             preinstance = "",
             ignoreAlarm = "ALL_THREE",
             bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
             bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Invalid_Params (COMPNAME = LeakageCPG_$debugMode_Invalid_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Required_Params (COMPNAME = LeakageCPG_$debugMode_Required_Params)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        LeakageCPG_$debugMode_Manual_Range (COMPNAME = LeakageCPG_$debugMode_Manual_Range)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}


COMPOSITE LeakageCPG_$debugMode_Invalid_Params
{
        DEF (   SEGNAME = $name,
                numOfWorstCase = -1,
                leakageInputFile = "",
                configSetName = "",
                datalogMode = ON,
                #debugMode = OBNOXIOUS,
                leakLowPatlist = basic_func_list,
                leakHighPatlist = basic_func_list,
                timings = iValTimings50MHz,
                level = iValLevelMin,
                pins = "all_even all_odd",
                leakTestType = VSS,
                forceValue = "0.1 0.1",
                forceLowValue = "0.1,0.1",
                lowSpec = "-0.022 -0.022", # for 800MDM chnged from 0.05
                highSpec = "0.022 0.022",  # for 800MDM chnged from 0.05
                clampHighValue = "",
                clampLowValue = "",
                deviceType = "STATIC",
                manualMeasureRange = "auto auto",
                testMethod = PARALLEL,
                overrideLeakTests = EXECUTE_ALL,
                dlogDcMinMaxRslt = MIN_MAX,
                userPause = 0.1,
                bypassGlobal = "",
                maskPins = "",
                postinstance = "iVal_utilityfunc!GenerateInstanceResults");
##############################################
#hramirez: Start of SPG test cases
##############################################
        tt_leakagecpg(name = LeakageVerifyCPG_Blank_SPG_$debugMode_F0,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_$debugMode_F0,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="ALL_THE_INVALID_PINS",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins1_$debugMode_F0,
                      pins = "LDPS",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="ALL_THE_INVALID_PINS",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins2_$debugMode_F0,
                      pins = "LDPS0t1",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="ALL_THE_INVALID_PINS",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins3_$debugMode_F0,
                      pins = "",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="LDPS",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins4_$debugMode_F0,
                      pins = "",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="LDPS0t1",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins5_$debugMode_F0,
                      pins = "",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="P001",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_pins6_$debugMode_F0,
                      pins = "",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="Rx1p",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
#jpd: adding test coverage
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_lkgtype1_$debugMode_F0,
        	      #preinstance = "iVal_utilityfunc!GenerateInstanceResults")
                      singleGroupExecution = "ENABLED",
                      superPinGroup="ALL_THE_INVALID_PINS",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_HDPS_$debugMode_F0,
                      singleGroupExecution = "ENABLED",
                      superPinGroup = "HDPS2",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_SPG_Count_$debugMode_F0,
                      singleGroupExecution = "ENABLED",
                      superPinGroup = "all_even",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Failing_all_odd_ALL_DATA_SPG_Count_$debugMode_P3,
                      singleGroupExecution = "ENABLED",
                      dlogDcMinMaxRslt = ALL_DATA,
                      highSpec = "0.022 0.010",
                      superPinGroup = "all_pins",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Failing_all_odd_MIN_MAX_SPG_Count_$debugMode_P3,
                      singleGroupExecution = "ENABLED",
                      dlogDcMinMaxRslt = MIN_MAX,
                      highSpec = "0.022 0.010",
                      superPinGroup = "all_pins",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Valid_SPG_$debugMode_P1,
                      singleGroupExecution = "ENABLED",
                      superPinGroup = "all_pins",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

##############################################
#hramirez:End of SPG test cases
##############################################
        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/some bad file . x m l",
                      configSetName = "bad_config_set")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_invalid_column.xml",
                      configSetName = "invalid_number_columns")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_invalid_spec_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_invalid_spec.xml",
                      configSetName = "invalid_spec")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_duplicate_configset_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_duplicate_configset.xml",
                      configSetName = "Input")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_duplicate_pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_duplicate_pin.xml",
                      configSetName = "Input")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_miss_pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_miss_pin.xml",
                      configSetName = "Input")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_number_columns_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_not_in_order_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_not_in_order.xml",
                      configSetName = "Input")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_unknown_pin_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs: 2715
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_unknown_pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_unknown_pin.xml",
                      configSetName = "unknown_pin")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_pin_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:2715
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_invalid_pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "invalid_pin")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_pingroups_not_allowed_$debugMode_F0
        # Test Description: leakageInputFile contains a pingroup, which is not allowed in input file.
        # HSDs:2715
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_pingroups_not_allowed_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "pingroups_not_allowed")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_invalid_value_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_invalid_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "pingroups_not_allowed")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_inputFile_spec_less_than_0_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_inputFile_spec_less_than_0_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file_spec_less_zero.xml",
                      configSetName = "spec_less_than_zero")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_timing_space_in_string_$debugMode_F0
        # Test Description: All required parameters valid except timing.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter timing.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_timing_space_in_string_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      timings = "bogus timing")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_timing_unknown_timing_$debugMode_F0
        # Test Description: All required parameters valid except timing.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter timing.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_timing_unknown_timing_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      timings = "bogusTiming")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_levels_space_in_string_$debugMode_F0
        # Test Description: All required parameters valid except levels.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter levels.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_levels_space_in_string_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      level = "bogus levels")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_levels_unknown_levels_$debugMode_F0
        # Test Description: All required parameters valid except levels.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter levels.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_levels_unknown_levels_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      level = "bogusLevels")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_pin_space_in_string_$debugMode_F0
        # Test Description: All required parameters valid except pin.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter pin.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_pin_space_in_string_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "bogus pin")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_pin_unknown_pin_$debugMode_F0
        # Test Description: All required parameters valid except pin.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter pin.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_pin_unknown_pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "bogusPin")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_pin_invalid_pin_type_$debugMode_F0
        # Test Description: All required parameters valid except pin.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter pin.
        #################################################################################################

        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_pin_invalid_pin_type_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "HDPS")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_spec_invalid_number_$debugMode_F0
        # Test Description: All required parameters valid except low_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_spec_invalid_number_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "ff,aa")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_spec_negative_number_$debugMode_F0
        # Test Description: All required parameters valid except low_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_spec_negative_number_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "-0.100,-0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_spec_number_of_values_less_$debugMode_F0
        # Test Description: All required parameters valid except low_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_spec_number_of_values_less_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_spec_number_of_values_more_$debugMode_F0
        # Test Description: All required parameters valid except low_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_spec_number_of_values_more_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "0.100,0.100,0.100,0.100,0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_spec_value_too_large_$debugMode_F0
        # Test Description: All required parameters valid except low_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_spec_value_too_large_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "100000.0,100000.0")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_spec_invalid_number_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_spec_invalid_number_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "ff,aa")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_spec_negative_number_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_spec_negative_number_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "-0.100,-0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_spec_number_of_values_less_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_spec_number_of_values_less_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_spec_number_of_values_more_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_spec_number_of_values_more_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "0.100,0.100,0.100,0.100,0.100")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_spec_value_too_large_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_spec.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_spec_value_too_large_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "100000.0,100000.0")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_force_low_empty_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter forceLowValue.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_force_low_empty_BOTH_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = "BOTH",
                      forceValue = "",
                      forceLowValue = "")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_force_low_empty_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter forceLowValue.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_force_empty_BOTH_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = "BOTH",
                      forceValue = "",
                      forceLowValue = "")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_force_low_empty_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter forceLowValue.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_number_force_less_than_pin_BOTH_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = "BOTH",
                      forceValue = "0.1",
                      forceLowValue = "0.1")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_low_patlist_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter low_patlist
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_low_patlist_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "someTypeOfInvalidPatlist")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_high_patlist_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter high_patlist.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_high_patlist_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakHighPatlist = "someTypeOfInvalidPatlist")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_clamp_low_value_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter clamp_low_spec.
        #################################################################################################
        #tt_leakagecpg(name = LeakageVerifyCPG_Invalid_clamp_low_value_$debugMode_F0,
        #              singleGroupExecution = "DISABLED",
        #              superPinGroup="",
        #              clampLowValue = "FF")

        #0?NEXT,
        #1?NEXT,
        #2?NEXT,
        #3?NEXT;

        ##Invalid Clamp values
        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Number_of_clamp_low_value_$debugMode_F0
        # Test Description: All required parameters valid except number of Low clamp (1) value specified
        # does not match the Number_of pins(2)
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Number_of_clamp_low_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampHighValue = "0.025 0.025",
                      clampLowValue = "-0.025")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

    #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Number_and_bad_Value_of_clamp_low_value_$debugMode_F0
        # Test Description: All required parameters valid except Low clamp value specified is bogus and also
        # does not match the Number_of pins
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Number_and_bad_Value_of_clamp_low_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampHighValue = "0.025 0.025",
                      clampLowValue = "BOGUS")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

    #################################################################################################
        # Test Name: LeakageVerifyCPG_bad_Value_of_clamp_low_value_$debugMode_F0
        # Test Description: All required parameters valid except one Low clamp value specified is bogus
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_low_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_bad_Value_of_clamp_low_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampHighValue = "0.025 0.025",
                      clampLowValue = "-0.025 BOGUS")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_clamp_high_value_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter clamp_low_spec.
        #################################################################################################
        #tt_leakagecpg(name = LeakageVerifyCPG_Invalid_clamp_high_value_$debugMode_F0,
        #              singleGroupExecution = "DISABLED",
        #              superPinGroup="",
        #              clampHighValue = "FF")

        #0?NEXT,
        #1?NEXT,
        #2?NEXT,
        #3?NEXT;



    #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Number_of_clamp_High_value_$debugMode_F0
        # Test Description: All required parameters valid except number of High clamp (1) value specified
        # does not match the Number_of pins(2)
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Number_of_clamp_high_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampHighValue = "0.025",
                      clampLowValue = "-0.025 -0.025")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

    #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Number_and_bad_Value_of_clamp_high_value_$debugMode_F0
        # Test Description: All required parameters valid except High clamp value specified is bogus and also
        # does not match the Number_of pins
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Number_and_bad_Value_of_clamp_high_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "BOGUS")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

    #################################################################################################
        # Test Name: LeakageVerifyCPG_bad_Value_of_clamp_high_value_$debugMode_F0
        # Test Description: All required parameters valid except one high clamp value specified is bogus
        # HSDs:4597
        # Expected Behavior: Fails verify for Invalid_Number_of_clamp_high_values.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_bad_Value_of_clamp_high_value_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 BOGUS")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;




        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Bypass_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid bypass
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Bypass_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "GL_BypassGlobal")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_clamp_high_value_$debugMode_F0
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid bypass
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Bypass_$debugMode_FNOTEXECUTED,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                      bypassGlobal = $bypass0)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Bypassq_$debugMode_P0,
        # Test Description: All required parameters valid except high_spec.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid bypass
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Bypassq_$debugMode_FNOTEXECUTED,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                      bypassGlobal = $bypass1)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_UserPauseLow_$debugMode_F0,
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_UserPauseLow_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      userPause = -0.1)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_UserPauseHigh_$debugMode_F0,
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_UserPauseHigh_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      userPause = 100.0)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_manual_measure_range_not_coorect_$debugMode_F0,
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_manual_measure_range_not_coorect_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "0.05 0.05",
                      highSpec = "-0.05 -0.05",
                      clampLowValue = "0.10 0.10",
                      clampHighValue = "-0.10 -0.10",
                      manualMeasureRange = "100A 100A")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_HigLimitLowerThanLowLimit_$debugMode_F0,
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        # Needed change for 800MDM for clamp values
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_HigLimitLowerThanLowLimit_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "0.022 0.022",
                      highSpec = "-0.022 -0.22",
                      clampLowValue = "0.025 0.025",
                      clampHighValue = "-0.025 -0.025",
                      manualMeasureRange = "auto auto")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

    #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_ClampValues_$debugMode_F0,
        # Test Description: All required parameters valid except clamp settings.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        # Needed change for 800MDM for clamp values
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_ClampValues_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "0.022 0.022",
                      highSpec = "-0.052 -0.22",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.055 0.055",
                      manualMeasureRange = "auto auto")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Spec_and_clamp_higher_than_range_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        # Needed separate test case for 800MDM for manualmeasureRange
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Spec_and_clamp_higher_than_range_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.022 -0.022",
                      highSpec = "0.022 0.022",
                      clampLowValue = "0.025 0.025",
                      clampHighValue = "-0.025 -0.025",
                      manualMeasureRange = "2uA 2uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_Spec_higher_than_clamp_$debugMode_F0
        # Test Description: All required parameters valid except leakageInputFile.
        # HSDs:
        # Expected Behavior: Fails verify for an invalid parameter leakageInputFile.
        # Needed separate test case for 800MDM for manualmeasureRange
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_Spec_higher_than_clamp_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.022 -0.022",
                      highSpec = "0.022 0.022",
                      clampLowValue = "0.020 0.020",
                      clampHighValue = "-0.020 -0.020",
                      manualMeasureRange = "25mA 25mA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_250DM_measurerange_$debugMode_F0
        # Test Description: Invalid measure range specified for a 250 DM pin group.
        # HSDs:3273
        # Expected Behavior: Fail.
        # Needed separate test case for 800MDM for manualmeasureRange
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_250DM_measurerange_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      manualMeasureRange = "8uA 95mA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #################################################################################################
        # Test Name: LeakageVerifyCPG_Invalid_65GDM_measurerange_$debugMode_F0
        # Test Description: Invalid measure range specified for a 65G DM pin group.
        # HSDs:3273
        # Expected Behavior: Fail.
        #################################################################################################
        tt_leakagecpg(name = LeakageVerifyCPG_Invalid_65GDM_measurerange_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even hsdm_all_ppmu_pins",
                      manualMeasureRange = "2uA 128mA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageCPG_$debugMode_Required_Params
{
        DEF (   SEGNAME = $name,
                numOfWorstCase = -1,
                leakageInputFile = "",
                configSetName = "",
                datalogMode = ON,
                #debugMode = OBNOXIOUS,
                leakLowPatlist = "",
                leakHighPatlist = ""
                timings = iValTimings50MHz,
                level = iValLevelMin,
                pins = "all_even all_odd",
                leakTestType = VSS,
                forceValue = "0.1 0.1",
                forceLowValue = "0.1,0.1",
                lowSpec = "-0.022 -0.022",  # for 800MDM chnged from 0.05
                highSpec = "0.022 0.022",  # for 800MDM changed from 0.05
                clampHighValue = "",
                clampLowValue = "",
                deviceType = "STATIC",
                manualMeasureRange = "auto auto",
                testMethod = PARALLEL,
                overrideLeakTests = EXECUTE_ALL,
                dlogDcMinMaxRslt = MIN_MAX,
                userPause = 0.1,
                bypassGlobal = "",
                maskPins = "",
                postinstance = "iVal_utilityfunc!GenerateInstanceResults");

        tt_leakagecpg(name = LeakageVerifyCPG_No_Level_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      level = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageVerifyCPG_No_Pins_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_No_LowSpec_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      lowSpec = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_No_HighSpec_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      highSpec = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_No_timing_with_low_patlist_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "basic_func_list",
                      timings = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_No_timing_with_high_patlist_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakHighPatlist = "basic_func_list",
                      timings = "")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_No_force_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = "VSS",
                      forceValue = "")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_no_force_low_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = "VCC",
                      forceLowValue = "")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageCPG_$debugMode_Manual_Range
{
        DEF (   SEGNAME = $name,
                numOfWorstCase = -1,
                leakageInputFile = "",
                configSetName = "",
                datalogMode = ON,
                #debugMode = OBNOXIOUS,
                leakLowPatlist = "",
                leakHighPatlist = ""
                timings = iValTimings50MHz,
                level = iValLevelMin,
                pins = "all_even all_odd",
                leakTestType = VSS,
                forceValue = "0.1 0.1",
                forceLowValue = "0.1 0.1",
                lowSpec = "-0.022", # for 800MDM chnged from 0.05
                highSpec = "0.022",  # for 800MDM changed from 0.05
                clampLowValue = "-0.025 -0.025", #changed from DM250 value 0.1
                clampHighValue = "0.025 0.025", #changed from DM250 value 0.1
                deviceType = "STATIC",
                manualMeasureRange = "auto auto",
                testMethod = PARALLEL,
                overrideLeakTests = EXECUTE_ALL,
                dlogDcMinMaxRslt = MIN_MAX,
                userPause = 0.1,
                bypassGlobal = "",
                maskPins = "",
                postinstance = "iVal_utilityfunc!GenerateInstanceResults");

        tt_leakagecpg(name = LeakageVerifyCPG_ManRange_Not_Equal_To_Force_auto_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd Yadds scan_ins",
                      forceValue = "0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022 0.022",
                      clampHighValue = "0.025 0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025 -0.025",
                      manualMeasureRange= "auto")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_ManRange_Not_Equal_To_Force_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd Yadds scan_ins",
                      forceValue = "0.1 0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022 0.022",
                      clampHighValue = "0.025 0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025 -0.025",
                      manualMeasureRange= "2uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Force_Not_Equal_To_Pin_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd Yadds scan_ins",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022 0.022",
                      clampHighValue = "0.025 0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025 -0.025",
                      manualMeasureRange= "2uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Range_check_Invalid_range_values_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd Yadds scan_ins",
                      forceValue = "0.1 0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022 0.022",
                      clampHighValue = "0.025 0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025 -0.025",
                      manualMeasureRange= "4uA 40uA 400uA 4000uA ")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Range_check_2ua_20ua_200ua_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd Yadds scan_ins",
                      forceValue = "0.1 0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022 0.022",
                      clampHighValue = "0.025 0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025 -0.025",
                      manualMeasureRange= "2uA 20uA 200uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageVerifyCPG_Range_check_2ma_25ma_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd,Yadds",
                      forceValue = "0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1",
                      lowSpec = "-0.022 -0.022 -0.022",
                      highSpec = "0.022 0.022 0.022" ,
                      clampHighValue = "0.025 0.025 0.025",
                      clampLowValue = "-0.025 -0.025 -0.025",
                      manualMeasureRange= "2mA 25mA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        # HSD 4105
        tt_leakagecpg(name = LeakageVerifyCPG_manual_measure_range_lower_than_hi_spec_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.0000019 -0.000019",
                      highSpec = "0.000019 0.00019",
                      manualMeasureRange= "2uA 20uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        # HSD 4105
        tt_leakagecpg(name = LeakageVerifyCPG_manual_measure_range_higher_than_lo_spec_$debugMode_F0,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.000019 -0.00019",
                      highSpec = "0.0000019 0.000019",
                      manualMeasureRange= "2uA 20uA")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


}

###################################
#START_EXECUTE CODE
###################################
COMPOSITE LeakageExecuteCPG_DEBUG_DISABLED
{

        DEF (   debugMode = "DISABLED",
                preinstance = "",
                ignoreAlarm = "ALL_THREE",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Manual_Range_AUTO_SPG (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO_SPG)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_AUTO (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_20uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_20uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_200uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_200uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_25mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_25mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_NONE (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_NONE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageExecuteCPG_DEBUG_BRIEF
{
        DEF (   debugMode = "BRIEF",
                preinstance = "",
                ignoreAlarm = "ALL_THREE",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Manual_Range_AUTO (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_20uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_20uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_200uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_200uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_25mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_25mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        LeakageCPG_multiPin_$debugMode_dlog_NONE (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_NONE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageExecuteCPG_DEBUG_VERBOSE
{
        DEF (   debugMode = "VERBOSE",
                preinstance = "",
                ignoreAlarm = "ALL_THREE",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Manual_Range_AUTO_SPG (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO_SPG)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_AUTO (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2UA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_20uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_20UA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_200uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_200UA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2MA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_25mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_25mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_NONE (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_NONE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageExecuteCPG_DEBUG_OBNOXIOUS
{
        DEF (   debugMode = "OBNOXIOUS",
                preinstance = "",
                ignoreAlarm = "ALL_THREE",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_$debugMode_Manual_Range_AUTO (COMPNAME = LeakageCPG_$debugMode_Manual_Range_AUTO)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_20uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_20uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_200uA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_200uA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_2mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_2mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_Manual_Range_25mA (COMPNAME = LeakageCPG_$debugMode_Manual_Range_25mA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        LeakageCPG_multiPin_$debugMode_dlog_NONE (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_NONE)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX (COMPNAME = LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageCPG_multiPin_$debugMode_dlog_NONE
{
        DEF (   dlogDcMinMaxRslt = "NONE",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_multiPin_$debugMode_dlog_FAIL_CHANNEL
{
        DEF (   dlogDcMinMaxRslt = "FAIL_CHANNEL",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_multiPin_$debugMode_dlog_FAIL_DATA
{
        DEF (   dlogDcMinMaxRslt = "FAIL_DATA",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_multiPin_$debugMode_dlog_ALL_DATA
{
        DEF (   dlogDcMinMaxRslt = "ALL_DATA",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_multiPin_$debugMode_dlog_MIN_MAX
{
        DEF (   dlogDcMinMaxRslt = "MIN_MAX",
                bypass0 = "GL_Bypass_Leakage_0",        #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                bypass1 = "GL_Bypass_Leakage_1");

        LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt (COMPNAME = LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_Manual_Range_AUTO
{
        DEF (   manualMeasureRange = "AUTO",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",       #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                # bypass2 = "GL_Bypass_Leakage_1",
                # bypassAlaram = "",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "P1",
                # lcdpsHighExpectPort = "P1",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.1",
                localForceLow = "0.1",
                localForceFail = "0.05",
                localForceOverFlow = "0.2",
                localLowSpec = "0.018",
                localHighSpec = "0.022",
                localClampLow = "-0.025",
                localClampHigh = "0.025",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME =LeakageCPG_$debugMode_$manualMeasureRange_InputFile)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

}

COMPOSITE LeakageCPG_$debugMode_Manual_Range_AUTO_SPG
{
        DEF (   manualMeasureRange = "AUTO",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",       #If bypassGlobal = $bypass in an actual instance, then it will be bypassed each time it is called by these composites
                # bypass2 = "GL_Bypass_Leakage_1",
                # bypassAlaram = "",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "P1",
                # lcdpsHighExpectPort = "P1",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.1",
                localForceLow = "0.1",
                localForceFail = "0.05",
                localForceOverFlow = "0.2",
                localLowSpec = "0.018",
                localHighSpec = "0.022",
                localClampLow = "-0.025",
                localClampHigh = "0.025",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec_SPG (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec_SPG)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile_SPG (COMPNAME =LeakageCPG_$debugMode_$manualMeasureRange_InputFile_SPG)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}
COMPOSITE LeakageCPG_$debugMode_Manual_Range_2uA
{
        DEF (   manualMeasureRange = "2uA",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "F0",
                # lcdpsHighExpectPort = "FNOTEXECUTED",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.00000875",      #should result in  +1.75uA but using p-dut model
                localForceLow = "0.00000875",
                localForceFail = "0.000007",    #should result in  +1.4uA but using p-dut model
                localForceOverFlow = "0.2",
                localLowSpec = "1.5uA",
                localHighSpec = "1.9uA",
                localClampLow = "-4uA",
                localClampHigh = "4uA",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );


        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        
        # LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_InputFile)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;
}
COMPOSITE LeakageCPG_$debugMode_Manual_Range_20uA
{
        DEF (   manualMeasureRange = "20uA",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "F0",
                # lcdpsHighExpectPort = "FNOTEXECUTED",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.0000875",       #should result in  +17.5uA but using p-dut model
                localForceLow = "0.0000875",
                localForceFail = "0.00007",     #should result in  +14.0uA but using p-dut model
                localForceOverFlow = "0.2",
                localLowSpec = "15uA",
                localHighSpec = "19uA",
                localClampLow = "-40uA",
                localClampHigh = "40uA",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_InputFile)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_Manual_Range_200uA {
        DEF (   manualMeasureRange = "200uA",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "F0",
                # lcdpsHighExpectPort = "FNOTEXECUTED",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.000875",        #should result in  +175uA but using p-dut model
                localForceLow = "0.000875",
                localForceOverFlow = "0.2",
                localForceFail = "0.0007",
                localLowSpec = "150uA",
                localHighSpec = "190uA",
                localClampLow = "-400uA",
                localClampHigh = "400uA",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_InputFile)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_Manual_Range_2mA {
        DEF (   manualMeasureRange = "2mA",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "F0",
                # lcdpsHighExpectPort = "FNOTEXECUTED",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.00875", #should result in  +1.75mA but using p-dut model
                localForceLow = "0.00875",
                localForceOverFlow = "0.2",
                localForceFail = "0.007",
                localLowSpec = "1.5mA",
                localHighSpec = "1.9mA",
                localClampLow = "-4mA",
                localClampHigh = "4mA",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_InputFile)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_Manual_Range_25mA {
        DEF (   manualMeasureRange = "25mA",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                # bypassAlaram = "",
                modifiedExpectPort = "F3",
                # lcdpsLowExpectPort = "P1",
                # lcdpsHighExpectPort = "P1",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "0.1",
                localForceLow = "0.1",
                localForceFail = "0.05",
                localForceOverFlow = "0.2",
                localLowSpec = "0.018",
                localHighSpec = "0.022",
                localClampLow = "-0.05",
                localClampHigh = "0.05",
                pins = "all_pins",
                PreInstancePrefix = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_",
                FailPreInstancePostfix = "_Fail.txt",
                PassPreInstancePostfix = "_Pass.txt",
                preinstance = $PreInstancePrefix$manualMeasureRange$PassPreInstancePostfix,
                # bypassHSDM = ""
                );

        LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec (COMPNAME = LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        LeakageCPG_$debugMode_$manualMeasureRange_InputFile (COMPNAME =LeakageCPG_$debugMode_$manualMeasureRange_InputFile,
                $ExpectPort = "F3")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}




COMPOSITE LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec
{
        DEF(    SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName           =                       "",
                datalogMode              =                       ON,
                #debugMode              =                       OBNOXIOUS,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                leakTestType            =                       BOTH,
                forceValue              =                       $localForce,
                forceLowValue           =                       $localForceLow,
                lowSpec                 =                       $localLowSpec,
                highSpec                =                       $localHighSpec,
                clampLowValue           =                       $localClampLow,
                clampHighValue          =                       $localClampHigh,
                deviceType              =                       "STATIC",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults");

        tt_leakagecpg(name = LeakageExecuteCPG_CheckForBypassFlag0_$debugMode_$manualMeasureRange_FNOTEXECUTED,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                      bypassGlobal = $bypass0)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_CheckForBypassFlag1_$debugMode_$manualMeasureRange_FNOTEXECUTED,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                      bypassGlobal = $bypass1)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #HSD 4597 test cases added for Empty clamp values at different manual measure mode. Clamp mode should default to autoclamp mode and execute

        tt_leakagecpg(name = LeakageExecuteCPG_with_all_even_all_odd_as_pin_Both_Clamps_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      clampLowValue   ="",
                      clampHighValue  ="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_with_all_even_all_odd_as_pin_Low_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      clampLowValue   ="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_with_all_even_all_odd_as_pin_High_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      clampHighValue  ="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_with_all_even_all_odd_as_pin_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_NumWorstCase_zero_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      numOfWorstCase = 0)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_NumWorstCase_low_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      numOfWorstCase = -10)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #tt_leakagecpg(name = LeakageExecuteCPG_with_lcdps_as_pin_low_force_$debugMode_$manualMeasureRange_$lcdpsLowExpectPort,
        #             singleGroupExecution = "DISABLED",
        #             superPinGroup="",
        #             pins = "LDPS"
        #             bypassGlobal = $bypassHSDM)
        #0?NEXT,
        #1?NEXT,
        #2?NEXT,
        #3?NEXT;

    #################################################################################################
    # Test Name: FixTBD_LeakageExecuteCPG_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort
    # Test Description: invalid test cases as the force value, clamp setting is not correct. Did not meet the minimum
    # tester hardware resolution spec. That why getting zero and causing alarm. Due to test case design and time constraint
    # these test cases has been FixTDB.
    # HSDs: 2623
    # Expected Behavior: F3
    # Collaterals Req:
    #################################################################################################

       # tt_leakagecpg(name = FixTBD_LeakageExecuteCPG_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort,
                        # singleGroupExecution = "DISABLED",
                        # superPinGroup="",
                        # bypassGlobal = "GL_FixTBDBypassGlobal",
                        # postinstance = "iVal_utilityfunc!GenerateInstanceResults",
                        # forceValue = $localForce,
                        # forceLowValue = $localForceLow,
                        # lowSpec = $localLowSpec,
                        # highSpec = $localHighSpec,
                        # clampLowValue = $localClampLow,
                        # clampHighValue = $localClampHigh,
                        # pins = "LDPS")
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort
                      singleGroupExecution = "DISABLED",
                      superPinGroup="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        # tt_leakagecpg(name = LeakageExecuteCPG_VSS_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                        # singleGroupExecution = "DISABLED",
                        # superPinGroup="",
                        # leakTestType = VSS)
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VCC_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = VCC)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_modified_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = VSS,
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VCC_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakTestType = VCC,
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_modified_serial_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      deviceType = "DYNAMIC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_modified_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      deviceType = "DYNAMIC",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_modified_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      overrideLeakTests = "EXIT_ON_FAIL")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_modified_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_modified_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_modified_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_modified_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        # new Overflow Test case
        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = "",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = "",
                      testMethod = SERIAL,
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_parallel_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = "",
                      deviceType = "DYNAMIC",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_BOTH_exec_test_serial_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      preinstance = "",
                      testMethod = SERIAL,
                      deviceType = "DYNAMIC",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


}

COMPOSITE LeakageCPG_$debugMode_$manualMeasureRange_Pattern_Exec_SPG
{
        DEF(    SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName           =                       "",
                datalogMode              =                       ON,
                #debugMode              =                       OBNOXIOUS,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                leakTestType            =                       BOTH,
                forceValue              =                       $localForce,
                forceLowValue           =                       $localForceLow,
                lowSpec                 =                       $localLowSpec,
                highSpec                =                       $localHighSpec,
                clampLowValue           =                       $localClampLow,
                clampHighValue          =                       $localClampHigh,
                deviceType              =                       "STATIC",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults");

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_CheckForBypassFlag0_$debugMode_$manualMeasureRange_FNOTEXECUTED,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      bypassGlobal = $bypass0)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_CheckForBypassFlag1_$debugMode_$manualMeasureRange_FNOTEXECUTED,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      bypassGlobal = $bypass1)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #HSD 4597 test cases added for Empty clamp values at different manual measure mode. Clamp mode should default to autoclamp mode and execute

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_with_all_even_all_odd_as_pin_Both_Clamps_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      clampLowValue   ="",
                      clampHighValue  ="",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_with_all_even_all_odd_as_pin_Low_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      clampLowValue   ="")

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_SPG_with_all_even_all_odd_as_pin_High_Clamp_Empty_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      clampHighValue  ="")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_SPG_with_all_even_all_odd_as_pin_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_NumWorstCase_zero_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      numOfWorstCase = 0)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_NumWorstCase_low_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      numOfWorstCase = -10)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        #tt_leakagecpg(name = LeakageExecuteCPG_SPG_with_lcdps_as_pin_low_force_$debugMode_$manualMeasureRange_$lcdpsLowExpectPort,
        #              singleGroupExecution = "ENABLED",
        #              superPinGroup="all_pins",
        #              pins = "LDPS"
        #              bypassGlobal = $bypassHSDM)
        #0?NEXT,
        #1?NEXT,
        #2?NEXT,
        #3?NEXT;

    #################################################################################################
    # Test Name: FixTBD_LeakageExecuteCPG_SPG_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort
    # Test Description: invalid test cases as the force value, clamp setting is not correct. Did not meet the minimum
    # tester hardware resolution spec. That why getting zero and causing alarm. Due to test case design and time constraint
    # these test cases has been FixTDB.
    # HSDs: 2623
    # Expected Behavior: F3
    # Collaterals Req:
    #################################################################################################

        # tt_leakagecpg(name = FixTBD_LeakageExecuteCPG_SPG_with_lcdps_as_pin_high_force_$debugMode_$manualMeasureRange_$lcdpsHighExpectPort,
                       # singleGroupExecution = "ENABLED",
                       # superPinGroup="all_pins",
                       # bypassGlobal = "GL_FixTBDBypassGlobal",
                       # forceValue = $localForce,
                       # forceLowValue = $localForceLow,
                       # lowSpec = $localLowSpec,
                       # highSpec = $localHighSpec,
                       # clampLowValue = $localClampLow,
                       # clampHighValue = $localClampHigh,
                       # pins = "LDPS")
        # 0?NEXT,
        # 1?NEXT,
        # 2?NEXT,
        # 3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_VSS_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      leakTestType = VSS)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_VCC_exec_test_parallel_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      leakTestType = VCC)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_modified_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_VSS_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      leakTestType = VSS,
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_VCC_exec_test_modified_parallel_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      leakTestType = VCC,
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_static_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_modified_serial_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      deviceType = "DYNAMIC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_modified_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      deviceType = "DYNAMIC",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_modified_serial_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      overrideLeakTests = "EXIT_ON_FAIL")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_modified_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_modified_serial_static_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_modified_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$ExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_modified_serial_dynamic_exit_on_fail_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_800MDM_$manualMeasureRange_Fail.txt"
                      preinstance = $PreInstancePrefix$manualMeasureRange$FailPreInstancePostfix,
                      overrideLeakTests = "EXIT_ON_FAIL",
                      deviceType = "DYNAMIC",
                      testMethod = SERIAL,
                      forceValue = $localForceFail,
                      forceLowValue = $localForceFail)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        # new Overflow Test case
        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = "",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_Overflow_static_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = "",
                      testMethod = SERIAL,
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_parallel_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = "",
                      deviceType = "DYNAMIC",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_BOTH_exec_test_serial_Overflow_dynamic_exec_all_$debugMode_$manualMeasureRange_$modifiedExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      preinstance = "",
                      testMethod = SERIAL,
                      deviceType = "DYNAMIC",
                      forceValue = $localForceOverFlow,
                      forceLowValue = $localForceOverFlow)

        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_$manualMeasureRange_InputFile {
        DEF(    SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName           =                       "",
                datalogMode              =                       ON,
                #debugMode              =                       OBNOXIOUS,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                #pins                   =                       "all_pins",
                leakTestType            =                       BOTH,
                forceValue              =                       $localForce,
                forceLowValue           =                       $localForceLow,
                lowSpec                 =                       $localLowSpec,
                highSpec                =                       $localHighSpec,
                clampLowValue           =                       $localClampLow,
                clampHighValue          =                       $localClampHigh,
                deviceType              =                       "STATIC",
                #manualMeasureRange     =                       "auto auto",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults",
                filepostfix1            =                       "Input_low_limit",
                filepostfix2            =                       "Input");

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_input_file_with_good_limits_$debugMode_$manualMeasureRange_P1,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_input_file_1type_port3_$debugMode_$manualMeasureRange_F3,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port3")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_input_file_2type_port4_$debugMode_$manualMeasureRange_F4,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port4")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_input_file_3type_port5_$debugMode_$manualMeasureRange_F5,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_port5")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT,
        5?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_VCC_input_file_with_good_limits_boundary_$debugMode_$manualMeasureRange_P1,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC_boundary")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VCC_input_file_with_good_limits_$debugMode_$manualMeasureRange_P1,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VSS_input_file_with_good_limits_miss_spec_$debugMode_$manualMeasureRange_F0,
                      leakTestType            =                       VSS,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VSS_miss_spec")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_VCC_input_file_with_good_limits_miss_spec_$debugMode_$manualMeasureRange_F0,
                      leakTestType            =                       VCC,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_VCC_miss_spec")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_with_bad_limits_no_type$debugMode_$manualMeasureRange_F3,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_low_limit_no_type")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = LeakageExecuteCPG_input_file_with_bad_limits_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix1)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_dlog_none_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      dlogDcMinMaxRslt = "NONE",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_dlog_fail_channel_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      dlogDcMinMaxRslt = "FAIL_CHANNEL",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_dlog_fail_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      dlogDcMinMaxRslt = "FAIL_DATA",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_dlog_all_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      dlogDcMinMaxRslt = "ALL_DATA",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_input_file_dlog_min_max_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      dlogDcMinMaxRslt = "MIN_MAX",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_$debugMode_$manualMeasureRange_InputFile_SPG {
        DEF(	SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName 		= 			"",
                datalogMode              =                       ON,
                #debugMode              =                       OBNOXIOUS,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                #pins                   =                       "all_pins",
                leakTestType            =                       BOTH,
                forceValue              =                       $localForce,
                forceLowValue           =                       $localForceLow,
                lowSpec                 =                       $localLowSpec,
                highSpec                =                       $localHighSpec,
                clampLowValue           =                       $localClampLow,
                clampHighValue          =                       $localClampHigh,
                deviceType              =                       "STATIC",
                #manualMeasureRange     =                       "auto auto",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                dlogDcMinMaxRslt        =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults",
                filepostfix1 		= 			"Input_low_limit",
                filepostfix2 		= 			"Input");

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_with_bad_limits_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix1)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_dlog_none_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      dlogDcMinMaxRslt = "NONE",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_dlog_fail_channel_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      dlogDcMinMaxRslt = "FAIL_CHANNEL",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_dlog_fail_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      dlogDcMinMaxRslt = "FAIL_DATA",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_dlog_all_data_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      dlogDcMinMaxRslt = "ALL_DATA",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_SPG_input_file_dlog_min_max_$debugMode_$manualMeasureRange_$inputfileBadLimitsExpectPort,
                      singleGroupExecution = "ENABLED",
                      superPinGroup="all_pins",
                      dlogDcMinMaxRslt = "MIN_MAX",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = $filepostfix2)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageCPG_multiPin_$debugMode_$dlogDcMinMaxRslt {
        DEF(	SEGNAME                 =                       $name,
                numOfWorstCase          =                       -1,
                leakageInputFile        =                       "",
                configSetName 		= 			"",
                datalogMode              =                       ON,
                #debugMode              =                       OBNOXIOUS,
                leakLowPatlist          =                       "basic_func_list",
                leakHighPatlist         =                       "basic_func_list"
                timings                 =                       iValTimings50MHz,
                level                   =                       iValLevelMin,
                pins                    =                       "LDPS all_even all_odd",
                leakTestType            =                       BOTH,
                forceValue              =                       "",
                forceLowValue           =                       "",
                lowSpec                 =                       "",
                highSpec                =                       "",
                clampHighValue          =                       "",
                clampLowValue           =                       "",
                deviceType              =                       "STATIC",
                manualMeasureRange      =                       "",
                testMethod              =                       PARALLEL,
                overrideLeakTests       =                       EXECUTE_ALL,
                #dlogDcMinMaxRslt       =                       MIN_MAX,
                userPause               =                       0.1,
                bypassGlobal            =                       "",
                maskPins                =                       "",
                postinstance            =                       "iVal_utilityfunc!GenerateInstanceResults");

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_static_execute_all_auto_range_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      deviceType = "DYNAMIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      testMethod = "SERIAL",
                      deviceType = "STATIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_dynamic_execute_all_auto_range_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      testMethod = "SERIAL",
                      deviceType = "DYNAMIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing port -1
#
#HSD 2780.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakLowPatlist = "",
                      leakHighPatlist = "",
                      testMethod = "SERIAL",
                      deviceType = "STATIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing port -1.
#
#HSD 2780.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakLowPatlist = "",
                      leakHighPatlist = "",
                      testMethod = "PARALLEL",
                      deviceType = "DYNAMIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

#
#This is bypass due to a bug that is casuing lcdps alarms.
#
#HSD 2776.
        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_input_file_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakageInputFile = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_with_lcdps",
                      testMethod = "SERIAL",
                      deviceType = "STATIC",
                      forceValue = "1.0 0.1 0.1",
                      forceLowValue = "1.0 0.1 0.1",
                      lowSpec = "-0.21 -0.018 -0.018",
                      highSpec = "0.21 0.022 0.022",
                      clampLowValue = "-1.3 -0.025 -0.025",
                      clampHighValue = "1.3 0.025 0.025",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_noLCDPS_serial_static_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      leakLowPatlist = "",
                      leakHighPatlist = "",
                      testMethod = "SERIAL",
                      deviceType = "STATIC",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.018 -0.018",
                      highSpec = "0.022 0.022",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      manualMeasureRange = "AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_noLCDPS_parallel_dynamic_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins = "all_even all_odd",
                      leakLowPatlist = "",
                      leakHighPatlist = "",
                      testMethod = "PARALLEL",
                      deviceType = "DYNAMIC",
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec = "-0.018 -0.018",
                      highSpec = "0.022 0.022",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      manualMeasureRange = "AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_static_execute_all_auto_range_hsdm_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakLowPatlist     = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist    = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
                      timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      level              = iVal65GDMLevelNom,
                      pins               = "LDPS all_even hsdm_rxp_all",
                      forceValue         = "1.0 0.1 0.25",
                      forceLowValue      = "1.0 0.1 0.25",
                      lowSpec            = "-0.21 -0.018 -0.06",
                      highSpec           = "0.21 0.022 0.06",
                      clampLowValue      = "-1.3 -0.025 -0.07",
                      clampHighValue     = "1.3 0.025 0.07",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_parallel_dynamic_execute_all_auto_range_hsdm_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakLowPatlist     = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist    = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
                      timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      level              = iVal65GDMLevelNom,
                      pins               = "LDPS all_even hsdm_rxp_all",
                      deviceType         = "DYNAMIC",
                      forceValue         = "1.0 0.1 0.25",
                      forceLowValue      = "1.0 0.1 0.25",
                      lowSpec            = "-0.21 0.018 -0.06",
                      highSpec           = "0.21 0.022 0.06",
                      clampLowValue      = "-1.3 -0.025 -0.07",
                      clampHighValue     = "1.3 0.025 0.07",
                      manualMeasureRange = "AUTO AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_serial_static_execute_all_auto_range_input_file_hsdm_F3,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      bypassGlobal = "",
                      leakLowPatlist     = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist    = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list"
                      timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      level              = iVal65GDMLevelNom,
                      pins               = "all_odd hsdm_rxp_all",
                      leakageInputFile   = "Leakage/leakage_input_file.xml",
                      configSetName = "Input_HSDM_with_lcdps",
                      testMethod         = "SERIAL",
                      deviceType         = "STATIC",
                      forceValue         = "0.1 0.25",
                      forceLowValue      = "0.1 0.25",
                      lowSpec            = "0.018 -0.06",
                      highSpec           = "0.022 0.06",
                      clampLowValue      = "-0.025 -0.07",
                      clampHighValue     = "0.025 0.07",
                      manualMeasureRange = "AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_HSDMpins_serial_static_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins               = "hsdm_rxp_all hsdm_rxn_all",
                      leakLowPatlist     = "",
                      leakHighPatlist    = "",
                      timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      level              = iVal65GDMLevelNom,
                      testMethod         = "SERIAL",
                      deviceType         = "STATIC",
                      forceValue         = "0.1 0.25",
                      forceLowValue      = "0.1 0.25",
                      lowSpec            = "0.018 -0.06",
                      highSpec           = "0.022 0.06",
                      clampLowValue      = "-0.025 -0.07",
                      clampHighValue     = "0.025 0.07",
                      manualMeasureRange = "AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_multiPin_$debugMode_$dlogDcMinMaxRslt_HSDMpins_parallel_dynamic_execute_all_auto_range_no_pat_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins               = "hsdm_rxp_all hsdm_rxn_all",
                      leakLowPatlist     = "",
                      leakHighPatlist    = "",
                      timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      level              = iVal65GDMLevelNom,
                      testMethod         = "PARALLEL",
                      deviceType         = "DYNAMIC",
                      forceValue         = "0.1 0.25",
                      forceLowValue      = "0.1 0.25",
                      lowSpec            = "0.018 -0.06",
                      highSpec           = "0.022 0.06",
                      clampLowValue      = "-0.025 -0.07",
                      clampHighValue     = "0.025 0.07",
                      manualMeasureRange = "AUTO AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


}

COMPOSITE LeakageExecuteCPG_HSDM {
    DEF(leakLowPatlist     = "",
        leakHighPatlist    = "",
        timings            = "Timing_65GDM_DS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
        level              = "iVal65GDMLevelNom",
        pins               = "hsdm_rxp_all hsdm_rxn_all",
        leakageInputFile   = "",
        configSetName      = "",
        leakTestType       = "BOTH",
        testMethod         = "PARALLEL",
        deviceType         = "STATIC",
        overrideLeakTests  = "EXECUTE_ALL",
        dlogDcMinMaxRslt   = "MIN_MAX",
        numOfWorstCase     = -1,
        forceValue         = "0.25 0.25",
        forceLowValue      = "0.25 0.25",
        lowSpec            = "-0.06 -0.06",
        highSpec           = "0.06 0.06",
        clampLowValue      = "-0.07 -0.07",
        clampHighValue     = "0.07 0.07",
        manualMeasureRange = "AUTO AUTO",
        userPause          = 0.1,
        datalogMode         = "ON",
        debugMode          = "VERBOSE",
        ignoreAlarm        = "ALL_THREE",
        preinstance        = "",
        maskPins           = "",
        bypassGlobal       = "");


        tt_leakagecpg(name = "LeakageExecuteCPG_SPG_INVALID_COUNT_HSDM_NS_8X_BasicPass_F0",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="hsdm_rxp_all",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = "LeakageExecuteCPG_SPG_VALID_COUNT_HSDM_NS_8X_BasicPass_P1",
                      singleGroupExecution = "ENABLED",
                      superPinGroup="hsdm_rxp_all hsdm_rxn_all",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_BasicPass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_10X_BasicPass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_10X_ClkEmbed_250DM_SDR_BasicPass_list",
                      leakHighPatlist = "Func_65GDM_NS_10X_ClkEmbed_250DM_SDR_BasicPass_list",
                      timings         = "Timing_65GDM_NS_10X_LSV_ClkEmbed_250DM_SDR_TC_fast",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_DS_8X_BasicPass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_DS_10X_BasicPass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_DS_10X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_DS_10X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_DS_10X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_DS_8X_Fail65GDM_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail65GDM_list",
                      leakHighPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail65GDM_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_DS_8X_Fail250DM_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail250DM_list",
                      leakHighPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_Fail250DM_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_DS_8X_FailBoth_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_FailBoth_list",
                      leakHighPatlist = "Func_65GDM_DS_8X_ClkEmbed_250DM_SDR_FailBoth_list")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ##Additionl Test cases to test other manual measure range of 6.5GDM PPMU

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_AUTO_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.2 0.2",
                      forceLowValue      = "0.2 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.095 -0.095",
                      clampHighValue     = "0.095 0.095",
                      manualMeasureRange = "AUTO AUTO",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_AUTO_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.3 0.3",
                      forceLowValue      = "0.3 0.3",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.095 -0.095",
                      clampHighValue     = "0.095 0.095",
                      manualMeasureRange = "AUTO AUTO",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_95mA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.2 0.2",
                      forceLowValue      = "0.2 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.095 -0.095",
                      clampHighValue     = "0.095 0.095",
                      manualMeasureRange = "95mA 95mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N95mA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.2 0.2",
                      forceLowValue      = "0.2 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.095 -0.095",
                      clampHighValue     = "0.095 0.095",
                      manualMeasureRange = "-95mA -95mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N128mA_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.2 0.2",
                      forceLowValue      = "0.2 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.128 -0.128",
                      clampHighValue     = "0.128 0.128",
                      manualMeasureRange = "-128mA -128mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_Clmps_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.2 0.2",
                      forceLowValue      = "0.2 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "9 -0.128",
                      clampHighValue     = "9 0.128",
                      manualMeasureRange = "-128mA -128mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_95mA_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.3 0.2",
                      forceLowValue      = "0.3 0.2",
                      lowSpec            = "0.03 0.03",
                      highSpec           = "0.05 0.05",
                      clampLowValue      = "-0.095 -0.095",
                      clampHighValue     = "0.095 0.095",
                      manualMeasureRange = "95mA 95mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_6mA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.02 0.02",
                      forceLowValue      = "0.02 0.02",
                      lowSpec            = "0.003 0.003",
                      highSpec           = "0.005 0.005",
                      clampLowValue      = "-0.006 -0.006",
                      clampHighValue     = "0.006 0.006",
                      manualMeasureRange = "6mA 6mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_N6mA_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      forceValue         = "0.02 0.02",
                      forceLowValue      = "0.02 0.02",
                      lowSpec            = "0.003 0.003",
                      highSpec           = "0.0035 0.005",
                      clampLowValue      = "-0.006 -0.006",
                      clampHighValue     = "0.006 0.006",
                      manualMeasureRange = "-6mA -6mA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_600uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_600uA_Pass.txt",
                      forceValue         = "0.002 0.002",
                      forceLowValue      = "0.002 0.002",
                      lowSpec            = "0.0003 0.0003",
                      highSpec           = "0.0005 0.0005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "600uA 600uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N600uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_600uA_Pass.txt",
                      forceValue         = "0.002 0.002",
                      forceLowValue      = "0.002 0.002",
                      lowSpec            = "0.0003 0.0003",
                      highSpec           = "0.0005 0.0005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "-600uA -600uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_600uA_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      #preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_600uA_Fail.txt",
                      forceValue         = "0.003 0.003",
                      forceLowValue      = "0.003 0.003",
                      lowSpec            = "0.0003 0.0003",
                      highSpec           = "0.0005 0.0005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "600uA 600uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_60uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_60uA_Pass.txt",
                      forceValue         = "0.0002 0.0002",
                      forceLowValue      = "0.0002 0.0002",
                      lowSpec            = "0.00003 0.00003",
                      highSpec           = "0.00005 0.00005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "60uA 60uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N60uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_60uA_Pass.txt",
                      forceValue         = "0.0002 0.0002",
                      forceLowValue      = "0.0002 0.0002",
                      lowSpec            = "0.00003 0.00003",
                      highSpec           = "0.00005 0.00005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "-60uA -60uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_60uA_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_60uA_Fail.txt",
                      forceValue         = "0.0002 0.0002",
                      forceLowValue      = "0.0002 0.0002",
                      lowSpec            = "0.00003 0.00003",
                      highSpec           = "0.00005 0.00005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "60uA 60uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_6uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Pass.txt",
                      forceValue         = "0.00002 0.00002",
                      forceLowValue      = "0.00002 0.00002",
                      lowSpec            = "0.000003 0.000003",
                      highSpec           = "0.000005 0.000005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "6uA 6uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N6uA_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Pass.txt",
                      forceValue         = "0.00002 0.00002",
                      forceLowValue      = "0.00002 0.00002",
                      lowSpec            = "0.000003 0.000003",
                      highSpec           = "0.000005 0.000005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "-6uA -6uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
        
                tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N6uA_P1",
	                      singleGroupExecution = "DISABLED",
	                      superPinGroup="",
	                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
	                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
	                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
	                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Pass.txt",
	                      forceValue         = "0.00002 0.00002",
	                      forceLowValue      = "0.00002 0.00002",
	                      lowSpec            = "0.000003 0.000003",
	                      highSpec           = "0.000005 0.000005",
	                      clampLowValue      = "-0.001 -0.001",
	                      clampHighValue     = "0.001 0.001",
	                      manualMeasureRange = "-6uA -6uA",)
	        0?NEXT,
	        1?NEXT,
	        2?NEXT,
	        3?NEXT;
                tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Pass_N2uA_F0",
	                      singleGroupExecution = "DISABLED",
	                      superPinGroup="",
	                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
	                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
	                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
	                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Pass.txt",
	                      forceValue         = "0.00002 0.00002",
	                      forceLowValue      = "0.00002 0.00002",
	                      lowSpec            = "0.000003 0.000003",
	                      highSpec           = "0.000005 0.000005",
	                      clampLowValue      = "-0.001 -0.001",
	                      clampHighValue     = "0.001 0.001",
	                      manualMeasureRange = "-2uA -2uA",)
	        0?NEXT,
	        1?NEXT,
	        2?NEXT,
	        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Fail_6uA_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast",
                      preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/Leakage_65gdm_6uA_Fail.txt",
                      forceValue         = "0.00002 0.00002",
                      forceLowValue      = "0.00002 0.00002",
                      lowSpec            = "0.000003 0.000003",
                      highSpec           = "0.000005 0.000005",
                      clampLowValue      = "-0.001 -0.001",
                      clampHighValue     = "0.001 0.001",
                      manualMeasureRange = "6uA 6uA",)
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageExecuteCPG_LCDPS
{
                DEF(
                        SEGNAME = $name,
                        numOfWorstCase = -1,
                        leakageInputFile = "",
                        configSetName = "",
                        datalogMode = ON,
                        debugMode = OBNOXIOUS,
                        leakLowPatlist = "basic_func_list",
                        leakHighPatlist = "basic_func_list"
                        timings =        iValTimings50MHz,
                        level = iValLevelMin,
                        pins    =       "LDPS",
                        leakTestType = BOTH,
                        forceValue = "1.3",
                        forceLowValue   = "0.1",
                        lowSpec = "-0.1",
                        highSpec = "0.3",
                        clampLowValue   =       "-2",
                        clampHighValue = "2",
                        deviceType      = "STATIC",
                        manualMeasureRange = "auto",
                        testMethod      = PARALLEL,
                        overrideLeakTests       = EXECUTE_ALL,
                        dlogDcMinMaxRslt = MIN_MAX,
                        userPause       = 0.1,
                        bypassGlobal = "",
                        ignoreAlarm = "ALL_THREE",
                        preinstance = "",
                        maskPins ="",
                        postinstance = "iVal_utilityfunc!GenerateInstanceResults"
                );

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan5uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "5uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan5uA.txt",
                        lowSpec = "2nA",
                        highSpec = "6nA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigher_N5uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-5uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan5uA.txt",
                        lowSpec = "2nA",
                        highSpec = "6nA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;               

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N50uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "50uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50uA.txt",
                        lowSpec = "-49uA",
                        highSpec = "49uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan50uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-50uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50uA.txt",
                        lowSpec = "-49uA",
                        highSpec = "49uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan50uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "50uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan50uA.txt",
                        lowSpec = "20nA",
                        highSpec = "60nA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan500uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "500uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500uA.txt",
                        lowSpec = "-499uA",
                        highSpec = "499uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N500uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-500uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500uA.txt",
                        lowSpec = "-499uA",
                        highSpec = "499uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan500uA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "500uA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan500uA.txt",
                        lowSpec = "200nA",
                        highSpec = "600nA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan5mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "5mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan5mA.txt",
                        lowSpec = "-4.9mA",
                        highSpec = "4.9mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N5mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-5mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan5mA.txt",
                        lowSpec = "-4.9mA",
                        highSpec = "4.9mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan5mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "5mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan5mA.txt",
                        lowSpec = "2uA",
                        highSpec = "6uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan50mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "50mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50mA.txt",
                        lowSpec = "-49mA",
                        highSpec = "49mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N50mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-50mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan50mA.txt",
                        lowSpec = "-49mA",
                        highSpec = "49mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan50mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "50mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan50mA.txt",
                        lowSpec = "20uA",
                        highSpec = "60uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan500mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "500mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500mA.txt",
                        lowSpec = "-499mA",
                        highSpec = "499mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N500mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-500mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan500mA.txt",
                        lowSpec = "-499mA",
                        highSpec = "499mA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeHigherThan500mA_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "500mA",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeHigherThan500mA.txt",
                        lowSpec = "200uA",
                        highSpec = "600uA"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLowerThan4A_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "4A",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
                        clampLowValue   =       "-3.99",
                        clampHighValue = "4.99",
                        lowSpec = "-3.9A",
                        highSpec = "4.9A"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;                
                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_CheckIsLCDPSRangeLower_N4A_P1",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "-4A",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
                        clampLowValue   =       "-4.99",
                        clampHighValue = "3.99",
                        lowSpec = "-4.9A",
                        highSpec = "3.9A"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;
                

                tt_leakagecpg(
                        name = "LeakageExecuteCPG_LCDPS_InvalidMeasurementRange_F0",
                        singleGroupExecution = "DISABLED",
                        superPinGroup="",
                        manualMeasureRange = "7A",
                        preinstance = "iVal_utilityfunc!ModifyDUTModelCfgFile /DutModelInputFiles/CheckIsLDPSRangeLowerThan4A.txt",
                        clampLowValue   =       "-6.99",
                        clampHighValue = "6.99",
                        lowSpec = "-6.9A",
                        highSpec = "6.9A"
                )
                0?NEXT,
                1?NEXT,
                2?NEXT,
                3?NEXT;

}

COMPOSITE LeakageExecuteCPG_Pin_Mask
{

                DEF(SEGNAME = $name,
                manualMeasureRange = "AUTO",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                # bypassAlaram = "",
                modifiedExpectPort = "F0",
                # lcdpsLowExpectPort = "P1",
                # lcdpsHighExpectPort = "P1",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "3.0",
                localForceLow = "3.0",
                localLowSpec = "-0.7",
                localHighSpec = "0.7",
                localClampLow = "-0.8",
                localClampHigh = "0.8",
                numOfWorstCase  = -1,
                leakageInputFile = "",
                configSetName = "",
                datalogMode = ON,
                debugMode = VERBOSE,
                leakLowPatlist ="basic_func_list",
                leakHighPatlist ="basic_func_list",
                timings = iValTimings50MHz,
                level   = iValLevelMin,
                deviceType      = "STATIC",
                testMethod      = PARALLEL,
                overrideLeakTests = EXECUTE_ALL,
                dlogDcMinMaxRslt = MIN_MAX,
                userPause = 0.1,
                ignoreAlarm = "NONE",
                preinstance = "",
                bypassGlobal = "");

## Single DM250 Pins leakage

        tt_leakagecpg(name = LeakageExecuteCPG_single_pins_No_Pin_Mask_Both_Fail_F3,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "P001 P002",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.01 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_single_pins_One_Pin_Mask_Fail_F4,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "P001 P002",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.01 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "P001",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_single_pins_All_Pin_Mask_Pass_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "P001 P002 P003",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1 0.1",
                      forceLowValue = "0.1 0.1 0.1",
                      lowSpec= "-0.01 -0.01 -0.01",
                      highSpec = "0.01 0.01 0.022",
                      clampLowValue = "-0.025 -0.025 -0.025",
                      clampHighValue = "0.025 0.025 0.025",
                      maskPins = "P001 P002",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ## DM250 Pins Groups leakage

        tt_leakagecpg(name = LeakageExecuteCPG_pingroups_No_Pin_Mask_all_even_Fail_F4,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "all_odd all_even",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.022 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_pingroups_Single_Pin_Mask_Fail_F4,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "all_odd all_even",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.022 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "P002 P004 P006",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_pingroups_Single_Pin_Mask_Pass_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "all_odd all_even",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.022 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "P002 P004 P006 P008 P010 P012 P014 P016 P018 P020",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = LeakageExecuteCPG_Pingroup_Mask_One_Group_Pass_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "all_odd all_even",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.022 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "all_even",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;


        tt_leakagecpg(name = LeakageExecuteCPG_Pingroup_Mask_both_Group_Pass_P1,
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      pins  = "all_odd all_even",
                      leakTestType = BOTH,
                      forceValue = "0.1 0.1",
                      forceLowValue = "0.1 0.1",
                      lowSpec= "-0.01 -0.01",
                      highSpec = "0.022 0.01",
                      clampLowValue = "-0.025 -0.025",
                      clampHighValue = "0.025 0.025",
                      maskPins = "all_odd all_even",
                      manualMeasureRange = "AUTO")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ##6.5GDM Pin/Group Masking Test cases
        ## Individual  Pins
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_BOTH_Single_Pin_No_Mask_Fail_F3",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "Rx1p Tx1n",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.04 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_BOTH_Single_Pin_Mask_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "Rx1p Tx1n",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.04 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "Rx1p",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        ## Pin groups
        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_No_Mask_rxn_pins_Fail_F4",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      level              = "iVal65GDMLevelNom",
                      leakTestType = BOTH,
                      pins              = "hsdm_rxp_all hsdm_rxn_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.04",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins = "",
                      timings         = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Mask_few_rxn_pins_Fail_F4",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "hsdm_rxp_all hsdm_rxn_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.04",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "Rx1n Rx2n Rx3n",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT,
        4?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Mask_all_rxn_pins_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "hsdm_rxp_all hsdm_rxn_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.04",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "Rx1n Rx2n Rx3n Rx4n Rx5n Rx6n Rx7n Rx8n Rx9n Rx10n Rx11n Rx12n",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Mask_rxn_Pingroup_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "hsdm_rxp_all hsdm_rxn_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.04",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "hsdm_rxn_all",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Mask_All_Pingroup_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "hsdm_rxp_all hsdm_rxn_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.04 0.04",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "hsdm_rxp_all hsdm_rxn_all",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}

COMPOSITE LeakageExecuteCPG_HS_Individual_Pin
{

                DEF(SEGNAME = $name,
                manualMeasureRange = "AUTO",
                ExpectPort = "P1",
                # bypass = "GL_Bypass_Leakage_0",
                # bypass2 = "GL_Bypass_Leakage_1",
                # bypassAlaram = "",
                modifiedExpectPort = "F0",
                # lcdpsLowExpectPort = "P1",
                # lcdpsHighExpectPort = "P1",
                inputfileBadLimitsExpectPort = "F3",
                localForce = "3.0",
                localForceLow = "3.0",
                localLowSpec = "-0.7",
                localHighSpec = "0.7",
                localClampLow = "-0.8",
                localClampHigh = "0.8",
                numOfWorstCase  = -1,
                leakageInputFile = "",
                configSetName = "",
                datalogMode = ON,
                debugMode = VERBOSE,
                leakLowPatlist ="basic_func_list",
                leakHighPatlist ="basic_func_list",
                timings = iValTimings50MHz,
                level   = iValLevelMin,
                deviceType      = "STATIC",
                testMethod      = PARALLEL,
                overrideLeakTests = EXECUTE_ALL,
                dlogDcMinMaxRslt = MIN_MAX,
                userPause = 0.1,
                ignoreAlarm = "NONE",
                preinstance = "",
                bypassGlobal = "");


        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_Invalid_HS_Pin_Group_Fail_F0",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "hsdm_tx_all hsdm_rx_all",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_VCC_Single_HS_Pin_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = VCC,
                      level              = "iVal65GDMLevelNom",
                      pins              = "Rx1p Rx1n",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_VSS_Single_HS_Pin_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = VSS,
                      level              = "iVal65GDMLevelNom",
                      pins              = "Tx1p Tx1n",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;

        tt_leakagecpg(name = "LeakageExecuteCPG_HSDM_NS_8X_BOTH_Single_HS_Pin_Pass_P1",
                      singleGroupExecution = "DISABLED",
                      superPinGroup="",
                      leakLowPatlist  = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakHighPatlist = "Func_65GDM_NS_8X_ClkEmbed_250DM_SDR_list",
                      leakTestType = BOTH,
                      level              = "iVal65GDMLevelNom",
                      pins              = "Rx1p Tx1n",
                      forceValue         = "0.25 0.25",
                      forceLowValue      = "0.25 0.25",
                      lowSpec            = "-0.06 -0.06",
                      highSpec           = "0.06 0.06",
                      clampLowValue      = "-0.07 -0.07",
                      clampHighValue     = "0.07 0.07",
                      manualMeasureRange = "AUTO",
                      maskPins           = "",
                      timings            = "Timing_65GDM_NS_8X_LSV_ClkEmbed_250DM_SDR_TC_fast")
        0?NEXT,
        1?NEXT,
        2?NEXT,
        3?NEXT;
}
